#!/usr/bin/env python
import sys
import os
import glob
import errno

CONV_VER="V1.00"

## jzd logic
## b/n needed 
 
## REVISION HISTORY

## ir errprint=1 then print error to monitor (Also write to file)
errprint=0



#filename_org=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""]
filename_org=['']*200
file_cnt=0
#print ("file_list: {}".format(file_list))
# print(len(sys.argv),sys.argv[0],sys.argv[1])

Cbit=['C0','C1','C2','C3','C4','C5','C6','C7','C8','C9','C10','C11','C12','C13','C14','C15','C16','C17','C18','C19','C20','C21','C22','C23','C24','C25','C26','C27','C28','C29','C30','C31','W','DRE','DRE2','R','M2','/D','/D2','SCROFF']
xyreg_name=['XC_1','XS_1','XK_1','XB_1','XC_2','XS_2','XK_2','XB_2','XC_3','XS_3','XK_3','XB_3','XC_4','XS_4','XK_4','XB_4','XH_1','XH_2','XH_3','XH_4','XT1','XT2','XT3','XT4','XT5','XT6','XT7','XT8','XT9','XT10','XT11','XT12','XT13','XT14','XT15','XT16','YC_1','YS_1','YK_1','YB_1','YC_2','YS_2','YK_2','YB_2','YC_3','YS_3','YK_3','YB_3','YC_4','YS_4','YK_4','YB_4','YH_1','YH_2','YH_3','YH_4','YT1','YT2','YT3','YT4','YT5','YT6','YT7','YT8','YT9','YT10','YT11','YT12','YT13','YT14','YT15','YT16']
xyreg_=[0]*100
# yreg_name=['YC_1','YS_1','YK_1','YB_1','YC_2','YS_2','YK_2','YB_2','YC_3','YS_3','YK_3','YB_3','YC_4','YS_4','YK_4','YB_4','YH_1''YH_2','YH_3','YH_4','YT1','YT2','YT3','YT4','YT5','YT6','YT7','YT8','YT9','YT10','YT11','YT12','YT13','YT14','YT15','YT16']
# yreg_=[0]*50
dreg_name=['D1A_1','D1B_1','D1C_1','D1D_1','D2A_1','D2B_1','D2C_1','D2D_1','D1E_1','D1F_1','D1G_1','D1H_1','D3_1','D3B_1','D4_1','D4B_1','D1A_2','D1B_2','D1C_2','D1D_2','D2A_2','D2B_2','D2C_2','D2D_2','D1E_2','D1F_2','D1G_2','D1H_2','D3_2','D3B_2','D4_2','D4B_2','D1A_3','D1B_3','D1C_3','D1D_3','D2A_3','D2B_3','D2C_3','D2D_3','D1E_3','D1F_3','D1G_3','D1H_3','D3_3','D3B_3','D4_3','D4B_3','D1A_4','D1B_4','D1C_4','D1D_4','D2A_4','D2B_4','D2C_4','D2D_4','D1E_4','D1F_4','D1G_4','D1H_4','D3_4','D3B_4','D4_4','D4B_4','D5_1','D6_1','D5_2','D6_2','D5_3','D6_3','D5_4','D6_4']
dreg_=[0]*200
dreg_region=[0]*200

# breg_name=['BH_1 ','BH_2 ','BH_3 ','BH_4 ','BD1_1','BD1_2','BD1_3','BD1_4','BD2_1','BD2_2','BD2_3','BD2_4','BD3_1','BD3_2','BD3_3','BD3_4','BD4_1','BD4_2','BD4_3','BD4_4','BD5_1','BD5_2','BD5_3','BD5_4','BD6_1','BD6_2','BD6_3','BD6_4','BD7_1','BD7_2','BD7_3','BD7_4']
# breg_=[0]*32
# nreg_name=['NH_1 ','NH_2 ','NH_3 ','NH_4 ','ND1_1','ND1_2','ND1_3','ND1_4','ND2_1','ND2_2','ND2_3','ND2_4','ND3_1','ND3_2','ND3_3','ND3_4','ND4_1','ND4_2','ND4_3','ND4_4','ND5_1','ND5_2','ND5_3','ND5_4','ND6_1','ND6_2','ND6_3','ND6_4','ND7_1','ND7_2','ND7_3','ND7_4']
# nreg_=[0]*32

breg_name=['BH','BD1','BD2','BD3','BD4','BD5','BD6','BD7']
nreg_name=['NH','ND1','ND2','ND3','ND4','ND5','ND6','ND7']
breg_=[[0,1,2,3,4,5,6,7],
      [1,3,7,5,2,0,4,6],
      [2,7,4,1,6,3,0,5],
      [3,5,1,7,0,6,2,4],
      [4,2,6,0,7,1,5,3],
      [5,0,3,6,1,4,7,2],
      [6,4,0,2,5,7,3,1],
      [7,6,5,4,3,2,1,0]]
nreg_=breg_.copy()


bn_cnt=0

tpreg_name=['TPH1A_1','TPH1B_1','TPH1C_1','TPH1D_1','TPH1E_1','TPH1F_1','TPH1G_1','TPH1H_1','TPH1A_2','TPH1B_2','TPH1C_2','TPH1D_2','TPH1E_2','TPH1F_2','TPH1G_2','TPH1H_2','TPH1A_3','TPH1B_3','TPH1C_3','TPH1D_3','TPH1E_3','TPH1F_3','TPH1G_3','TPH1H_3','TPH1A_4','TPH1B_4','TPH1C_4','TPH1D_4','TPH1E_4','TPH1F_4','TPH1G_4','TPH1H_4','TPH2A_1','TPH2B_1','TPH2C_1','TPH2D_1','TPH2E_1','TPH2F_1','TPH2G_1','TPH2H_1','TPH2A_2','TPH2B_2','TPH2C_2','TPH2D_2','TPH2E_2','TPH2F_2','TPH2G_2','TPH2H_2','TPH2A_3','TPH2B_3','TPH2C_3','TPH2D_3','TPH2E_3','TPH2F_3','TPH2G_3','TPH2H_3','TPH2A_4','TPH2B_4','TPH2C_4','TPH2D_4','TPH2E_4','TPH2F_4','TPH2G_4','TPH2H_4']
tpreg_=[0]*100

tp1=0
tp2=0
tp1_=[0,0,0,0,0]
tp2_=[0,0,0,0,0]

b_val_=[0,0,0,0,0]
b_val=0
n_val_=[0,0,0,0,0]
n_val=0
bn_use=0
dinv=0


# for idr in range(len(dreg_name)):
#    if dreg_name[idr]=='D2A_1':
#       dreg_[idr]=int('0x3f0',16)
#    elif dreg_name[idr]=='D2A_2':
#       dreg_[idr]=int('0x3f0',16)
#    elif dreg_name[idr]=='D3B_1':
#       dreg_[idr]=int('0xffff',16)
#    elif dreg_name[idr]=='D4B_1':
#       dreg_[idr]=int('0x20',16)
#    elif dreg_name[idr]=='D4B_2':
#       dreg_[idr]=int('0x20',16)

# for itp in range(len(tpreg_name)):
#    if tpreg_name[itp]=='TPH1A_1':
#       tpreg_[itp]=int('0x6666',16)
#    if tpreg_name[itp]=='TPH2A_1':
#       tpreg_[itp]=int('0x6666',16)

x_addr=0
y_addr=0

jzd_status=0

FMD01_CA0=['Y0,Y8','X16','C0','C0,Y8','X16,Y4','X0,Y0','C0','Y16','C0','C0,C0','C0,Y12','/X16','/X16','/Y16,Y12','C0,FL','C0,Y14']
FMD01_CA1=['Y1,Y9','X17','C1','C1,Y9','X17,Y5','X1,Y1','C1','Y17','C1','C1,C1','C1,Y13','/X17','/X17','/Y17,Y13','Y10,FL','C1,Y15']
FMD01_CA2=['Y2,Y10','X18','C2','C2,Y10','X18,Y6','X2,Y2','C2','Y18','C2','C2,C2','C2,Y14','/X18','/X18','/Y18,FL','C2,Y14','C2,FL']
FMD01_CA3=['Y3,Y11','X19','X7','C3,Y11','X19,Y7','X3,Y3','Y4','Y19','C3','C3,C3','X14,Y15','/X19','/X19','/Y19,FL','C3,FL','C3,FL']
FMD01_CA4=['Y4,Y12','X11','X8','C4,FL','FL,FL','X4,FL','Y7','Y5','Y7','C4,C4','X15,FL','X11','FL','Y5,FL','Y9,FL','C4,FL']
FMD01_CA5=['Y5,Y13','X12','X9','C5,FL','C5,FL','X5,FL','Y8','Y6','Y8','C5,C5','FL,FL','X12','C5','Y6,FL','Y9,FL','C5,FL']
FMD01_CA6=['Y6,Y14','X13','X10','C6,FL','C6,FL','X6,FL','Y9','C6','Y9','Y7,Y15','FL,FL','X13','C6','C6,FL','Y8,FL','Y3,FL']

FMD02_CA0=['Y0,Y8','C0','C0','C0,Y8','C0,Y4','X0,Y0','C0','C0','C0','C0,C0','C0,Y12','/X16','/X16','/Y16,Y12','C0,FL','C0,Y14']
FMD02_CA1=['Y1,Y9','C1','C1','C1,Y9','C1,Y5','X1,Y1','C1','C1','C1','C1,C1','C1,Y13','/X17','/X17','/Y17,Y13','Y10,FL','C1,Y15']
FMD02_CA2=['Y2,Y10','C2','C2','C2,Y10','C2,Y6','X2,Y2','C2','C2','C2','C2,C2','C2,Y14','/X18','/X18','/Y18,FL','C2,Y14','C2,FL']
FMD02_CA3=['Y3,Y11','C3','X7','C3,Y11','C3,Y7','X3,Y3','Y4','C3','C3','C3,C3','X14,Y15','/X19','/X19','/Y19,FL','C3,FL','C3,FL']
FMD02_CA4=['Y4,Y12','X11','X8','C4,FL','FL,FL','X4,FL','Y7','Y5','Y7','C4,C4','X15,FL','X11','FL','Y5,FL','Y9,FL','C4,FL']
FMD02_CA5=['Y5,Y13','X12','X9','C5,FL','C5,FL','X5,FL','Y8','Y6','Y8','C5,C5','FL,FL','X12','C5','Y6,FL','Y9,FL','C5,FL']
FMD02_CA6=['Y6,Y14','X13','X10','C6,FL','C6,FL','X6,FL','Y9','C6','Y9','Y7,Y15','FL,FL','X13','C6','C6,FL','Y8,FL','Y3,FL']




scr2a=[0x0000,0x03FF,0x0400,0x07FF,0x0800,0x0BFF,0x0C00,0x0FFF,0x1000,0x13FF,0x1400,0x17FF,0x1800,0x1BFF,0x1C00,0x1FFF,0x2000,0x23FF,0x2400,0x27FF,0x2800,0x2BFF,0x2C00,0x2FFF,0x3000,0x33FF,0x3400,0x37FF,0x3800,0x3BFF,0x3C00,0x3FFF,
0x4000,0x43FF,0x4400,0x47FF,0x4800,0x4BFF,0x4C00,0x4FFF,0x5000,0x53FF,0x5400,0x57FF,0x5800,0x5BFF,0x5C00,0x5FFF,0x6000,0x63FF,0x6400,0x67FF,0x6800,0x6BFF,0x6C00,0x6FFF,0x7000,0x73FF,0x7400,0x77FF,0x7800,0x7BFF,0x7C00,0x7FFF,
0x8000,0x83FF,0x8400,0x87FF,0x8800,0x8BFF,0x8C00,0x8FFF,0x9000,0x93FF,0x9400,0x97FF,0x9800,0x9BFF,0x9C00,0x9FFF,0xA000,0xA3FF,0xA400,0xA7FF,0xA800,0xABFF,0xAC00,0xAFFF,0xB000,0xB3FF,0xB400,0xB7FF,0xB800,0xBBFF,0xBC00,0xBFFF,
0xC000,0xC3FF,0xC400,0xC7FF,0xC800,0xCBFF,0xCC00,0xCFFF,0xD000,0xD3FF,0xD400,0xD7FF,0xD800,0xDBFF,0xDC00,0xDFFF,0xE000,0xE3FF,0xE400,0xE7FF,0xE800,0xEBFF,0xEC00,0xEFFF,0xF000,0xF3FF,0xF400,0xF7FF,0xF800,0xFBFF,0xFC00,0xFFFF]

scr2=[0]*1024
scr2[0:128]=scr2a
scr2[128:256]=scr2a
scr2[256:384]=scr2a
scr2[384:512]=scr2a
scr2[512:640]=scr2a
scr2[640:768]=scr2a
scr2[768:896]=scr2a
scr2[896:1024]=scr2a

# print(src2)

# scr2=[0x0000,0x03FF,0x0400,0x07FF,0x0800,0x0BFF,0x0C00,0x0FFF,0x1000,0x13FF,0x1400,0x17FF,0x1800,0x1BFF,0x1C00,0x1FFF,
# 0x2000,0x23FF,0x2400,0x27FF,0x2800,0x2BFF,0x2C00,0x2FFF,0x3000,0x33FF,0x3400,0x37FF,0x3800,0x3BFF,0x3C00,0x3FFF,
# 0x4000,0x43FF,0x4400,0x47FF,0x4800,0x4BFF,0x4C00,0x4FFF,0x5000,0x53FF,0x5400,0x57FF,0x5800,0x5BFF,0x5C00,0x5FFF,
# 0x6000,0x63FF,0x6400,0x67FF,0x6800,0x6BFF,0x6C00,0x6FFF,0x7000,0x73FF,0x7400,0x77FF,0x7800,0x7BFF,0x7C00,0x7FFF,
# 0x8000,0x83FF,0x8400,0x87FF,0x8800,0x8BFF,0x8C00,0x8FFF,0x9000,0x93FF,0x9400,0x97FF,0x9800,0x9BFF,0x9C00,0x9FFF,
# 0xA000,0xA3FF,0xA400,0xA7FF,0xA800,0xABFF,0xAC00,0xAFFF,0xB000,0xB3FF,0xB400,0xB7FF,0xB800,0xBBFF,0xBC00,0xBFFF,
# 0xC000,0xC3FF,0xC400,0xC7FF,0xC800,0xCBFF,0xCC00,0xCFFF,0xD000,0xD3FF,0xD400,0xD7FF,0xD800,0xDBFF,0xDC00,0xDFFF,
# 0xE000,0xE3FF,0xE400,0xE7FF,0xE800,0xEBFF,0xEC00,0xEFFF,0xF000,0xF3FF,0xF400,0xF7FF,0xF800,0xFBFF,0xFC00,0xFFFF,
# 0x0000,0x03FF,0x0400,0x07FF,0x0800,0x0BFF,0x0C00,0x0FFF,0x1000,0x13FF,0x1400,0x17FF,0x1800,0x1BFF,0x1C00,0x1FFF,
# 0x2000,0x23FF,0x2400,0x27FF,0x2800,0x2BFF,0x2C00,0x2FFF,0x3000,0x33FF,0x3400,0x37FF,0x3800,0x3BFF,0x3C00,0x3FFF,
# 0x4000,0x43FF,0x4400,0x47FF,0x4800,0x4BFF,0x4C00,0x4FFF,0x5000,0x53FF,0x5400,0x57FF,0x5800,0x5BFF,0x5C00,0x5FFF,
# 0x6000,0x63FF,0x6400,0x67FF,0x6800,0x6BFF,0x6C00,0x6FFF,0x7000,0x73FF,0x7400,0x77FF,0x7800,0x7BFF,0x7C00,0x7FFF,
# 0x8000,0x83FF,0x8400,0x87FF,0x8800,0x8BFF,0x8C00,0x8FFF,0x9000,0x93FF,0x9400,0x97FF,0x9800,0x9BFF,0x9C00,0x9FFF,
# 0xA000,0xA3FF,0xA400,0xA7FF,0xA800,0xABFF,0xAC00,0xAFFF,0xB000,0xB3FF,0xB400,0xB7FF,0xB800,0xBBFF,0xBC00,0xBFFF,
# 0xC000,0xC3FF,0xC400,0xC7FF,0xC800,0xCBFF,0xCC00,0xCFFF,0xD000,0xD3FF,0xD400,0xD7FF,0xD800,0xDBFF,0xDC00,0xDFFF,
# 0xE000,0xE3FF,0xE400,0xE7FF,0xE800,0xEBFF,0xEC00,0xEFFF,0xF000,0xF3FF,0xF400,0xF7FF,0xF800,0xFBFF,0xFC00,0xFFFF,
# 0x0000,0x03FF,0x0400,0x07FF,0x0800,0x0BFF,0x0C00,0x0FFF,0x1000,0x13FF,0x1400,0x17FF,0x1800,0x1BFF,0x1C00,0x1FFF,
# 0x2000,0x23FF,0x2400,0x27FF,0x2800,0x2BFF,0x2C00,0x2FFF,0x3000,0x33FF,0x3400,0x37FF,0x3800,0x3BFF,0x3C00,0x3FFF,
# 0x4000,0x43FF,0x4400,0x47FF,0x4800,0x4BFF,0x4C00,0x4FFF,0x5000,0x53FF,0x5400,0x57FF,0x5800,0x5BFF,0x5C00,0x5FFF,
# 0x6000,0x63FF,0x6400,0x67FF,0x6800,0x6BFF,0x6C00,0x6FFF,0x7000,0x73FF,0x7400,0x77FF,0x7800,0x7BFF,0x7C00,0x7FFF,
# 0x8000,0x83FF,0x8400,0x87FF,0x8800,0x8BFF,0x8C00,0x8FFF,0x9000,0x93FF,0x9400,0x97FF,0x9800,0x9BFF,0x9C00,0x9FFF,
# 0xA000,0xA3FF,0xA400,0xA7FF,0xA800,0xABFF,0xAC00,0xAFFF,0xB000,0xB3FF,0xB400,0xB7FF,0xB800,0xBBFF,0xBC00,0xBFFF,
# 0xC000,0xC3FF,0xC400,0xC7FF,0xC800,0xCBFF,0xCC00,0xCFFF,0xD000,0xD3FF,0xD400,0xD7FF,0xD800,0xDBFF,0xDC00,0xDFFF,
# 0xE000,0xE3FF,0xE400,0xE7FF,0xE800,0xEBFF,0xEC00,0xEFFF,0xF000,0xF3FF,0xF400,0xF7FF,0xF800,0xFBFF,0xFC00,0xFFFF]

# if len(sys.argv) > 2:
#    print('VERSION:'+CONV_VER)
#    print('NOT Enough Arguements, Check Arguments! ')
#    print('check ORG_PATN1 ORG_PATN2 ...')
#    sys.exit()
# elif len(sys.argv) == 3 :
#    errprint=1
# else:
#    errprint=0
#    sys.exit()

header_sdef_alias=['']*3000
header_sdef_desc=['']*3000
header_sdef_cbit=['']*3000
sdef_idx=0

xsp=127

# path=str(sys.argv[1])
path='.\\'

#path="./T5511/Dsol_200109/X16_8BANK_R21/"
file_list = os.listdir(path)
# print(path)
# src_file=str(sys.argv[1])
patline=['']
patline_seq=['']
pccnt_seq=[0]
icnt_seq=[0]
label_seq=['']
lineway_seq=[0]
patline_f0=['']

# pattern .
patnlist=[
   '',
	# 'GOSUB FUNA(3000,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNNN","PDCS4FI4R7N5A",#6666,0.0NS, 1.0S," PXI Jump A                                 ")',
   # 'GOSUB FUNA(3001,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNNN","PDCS4FI4R7N5B",#6666,0.0NS, 1.0S," PXI Jump B                                 ")',
   # 'GOSUB FUNA(3002,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNNN","PDCS4FI8R7N5A",#6666,0.0NS, 32MS," PXI test : PXI 0,7,1,6    A             ")',
   # 'GOSUB FUNA(3003,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNNN","PDCS4FI8R7N5B",#6666,0.0NS, 32MS," PXI test : PXI 0,7,1,6    B             ")',
   # 'GOSUB FUNA(3004,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FIYF7N5A",#6666,0.0NS,3.9US," ROWCMP IBMCLAIM A                          ")',
   # 'GOSUB FUNA(3005,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FIYF7N5B",#6666,0.0NS,3.9US," ROWCMP IBMCLAIM B                          ")',
   # 'GOSUB FUNA(3006,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FROB7N5A",#6666,0.0NS, 1.0S," Row Bar test                               ")',
   # 'GOSUB FUNA(3007,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FCOB7N5A",#6666,0.0NS, 1.0S," Column Bar test                            ")',
   # 'GOSUB FUNA(3008,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FCOB7N5N",#6666,0.0NS, 1.0S," Column Bar test            BL32            ")',
   # 'GOSUB FUNA(3009,6,0,0,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FWFS7N5A",#6666,0.0NS, 1.0S," WCK FS Column Bar test                     ")',
   # 'GOSUB FUNA(3010,6,0,0,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FWFS7N5B",#6666,0.0NS, 1.0S," WCK FS Read Modify Write                   ")',
   # 'GOSUB FUNA(3011,6,0,0,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FWST7N5A",#6666,0.0NS, 1.0S," WCK WR PST Column Bar test                 ")',
   # 'GOSUB FUNA(3012,6,0,0,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FRST7N5A",#6666,0.0NS, 1.0S," WCK RD PST Column Bar test                 ")',
   # 'GOSUB FUNA(3013,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FRMW7N5A",#6666,0.0NS, 1.0S," Read Modify Write                          ")',
   # 'GOSUB FUNA(3014,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FRMW7N5B",#6666,0.0NS, 1.0S," RMW WR-RD-MWR(A)-RD-MWR-WR(A)-RD           ")',
   # 'GOSUB FUNA(3015,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PRNN2","PDCS4FRMW7D5N",#6666,0.0NS, 1.0S," Read Modify Write          BL32            ")',
   # 'GOSUB FUNA(3016,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FRMW7N5N",#6666,0.0NS, 1.0S," Read Modify Write          BL32            ")',
   # 'GOSUB FUNA(3017,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FSEL7N5A",#6666,0.0NS,100US," I4BK SELF REFRESH NEW                      ")',
   # 'GOSUB FUNA(3018,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FSEL7N5B",#6666,0.0NS,100US," I4BK SELF REFRESH NEW W/WFF/RFF            ")',
   # 'GOSUB FUNA(3019,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FSEL7N5C",#6666,0.0NS, 75US," I4BK SELF REFRESH NEW Self+PDN             ")',
   # 'GOSUB FUNA(3020,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FDSM7N5A",#6666,0.0NS,  4MS," SELF REFRESH DSM Mode                      ")',
   # 'GOSUB FUNA(3021,6,0,0,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FDSM7N5B",#6666,0.0NS,100US," SELF REFRESH DSM Mode SHORT                ")',
   # 'GOSUB FUNA(3022,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FRRD7N5A",#6666,0.0NS,2.0US," ACT to PBR,PBR to ACT A                   ")',
   # 'GOSUB FUNA(3023,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FRRD7N5B",#6666,0.0NS,2.0US," ACT to PBR,PBR to ACT B                   ")',
   # 'GOSUB FUNA(3024,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FIOM7N5A",#6666,0.0NS,3.9US," IO MOVING                                  ")',
   # 'GOSUB FUNA(3025,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FNIF7N5A",#6666,0.0NS, 1.0S," New I/O Format                             ")',
   # 'GOSUB FUNA(3026,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FI2F7N5A",#6666,0.0NS,3.9US," New I/O Format2                            ")',
   # 'GOSUB FUNA(3027,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FWRX7N5A",#0000,0.0NS,3.9US," Write X Single bank                        ")',
   # 'GOSUB FUNA(3028,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FWRX7N5B",#0000,0.0NS,3.9US," Write X Multi  bank CASE A                 ")',
   # 'GOSUB FUNA(3029,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FWRX7N5C",#0000,0.0NS, 1.0S," Write X Multi  bank CASE B                 ")',
   # 'GOSUB FUNA(3030,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PWNN2","PDCS4FWDI7N5A",#0000,0.0NS, 32MS," Write DBI A                                ")',
   # 'GOSUB FUNA(3031,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PWNN2","PDCS4FWDI7N5B",#0000,0.0NS, 32MS," Write DBI B                                ")',
   # 'GOSUB FUNA(3032,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PWNN2","PDCS4FWDI7N5C",#0000,0.0NS, 32MS," Write DBI C                                ")',
   # 'GOSUB FUNA(3033,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PWNN2","PDCS4FWDI7N5N",#0000,0.0NS, 32MS," Write DBI A                 BL32           ")',
   # 'GOSUB FUNA(3034,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PWNN2","PDCS4FWDI7N5M",#0000,0.0NS, 32MS," Write DBI B                 BL32           ")',
   # 'GOSUB FUNA(3035,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PWNN2","PDCS4FLDM7N5A",#6666,0.0NS, 1.0S," WR DM DBI Test                             ")',
   # 'GOSUB FUNA(3036,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FWDM7N5A",#6666,0.0NS, 32MS," Write DM tCCDMW 2CK                        ")',
   # 'GOSUB FUNA(3037,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FDWN7N5N",#6666,0.0NS, 32MS," WR_BL32 to Masked WR_BL16                  ")',
   # 'GOSUB FUNA(3038,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FNV27N5A",#6666,0.0NS, 1.0S," NVDIA Claim TSTBLT2                        ")',
   # 'GOSUB FUNA(3039,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FNV37N5A",#6666,0.0NS, 1.0S," NVDIA Claim TSTBLT3 A                      ")',
   # 'GOSUB FUNA(3040,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FNV37N5B",#6666,0.0NS, 1.0S," NVDIA Claim TSTBLT3 B                      ")',
   # 'GOSUB FUNA(3041,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FNV47N5A",#6666,0.0NS, 1.0S," NVDIA Claim TSTBLT4                        ")',
   # 'GOSUB FUNA(3042,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FNV57N5A",#6666,0.0NS, 1.0S," NVDIA Claim TSTBLT5                        ")',
   # 'GOSUB FUNA(3043,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FWFR7N5A",#0000,0.0NS, 1.0S," WCK Free running mode test A               ")',
   # 'GOSUB FUNA(3044,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FWFR7N5B",#6666,0.0NS,3.9US," WCK Free running mode test B               ")',
   # 'GOSUB FUNA(3045,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FFCW7N5A",#6666,0.0NS, 32MS," #FC write test fail                        ")',
   # 'GOSUB FUNA(3046,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FFCR7N5A",#6666,0.0NS, 32MS," #FC read  test fail                        ")',
   # 'GOSUB FUNA(3047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PWNN2","PDCS4FOTF7N5A",#0000,0.0NS, 32MS," Single Bank OTF                            ")',
   # 'GOSUB FUNA(3048,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PWNN2","PDCS4FOTF7N5B",#0000,0.0NS, 1.0S," Multi  Bank OTF                            ")',
   # 'GOSUB FUNA(3049,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FBLR7N5A",#6666,0.0NS, 1.0S," MOD_2BK PP MASK                            ")',
   # 'GOSUB FUNA(3050,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FAAD7N5A",#6666,0.0NS, 1.0S," ACT1 to ACT Gap TEST                       ")',
   # 'GOSUB FUNA(3051,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FOCG7N5O",#6666,0.0NS, 32MS," OCG   tAAD                  BL32           ")',
   # 'GOSUB FUNA(3052,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FOCG7N5A",#6666,0.0NS, 32MS," Other Bank Y-Compl Gapless                 ")',
   # 'GOSUB FUNA(3053,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FOCG7N5N",#6666,0.0NS, 32MS," Other Bank Y-Compl Gapless  BL32           ")',
   # 'GOSUB FUNA(3054,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FPDN7N5A",#6666,0.0NS, 32MS," PDN ALL CASE NEW A                         ")',
   # 'GOSUB FUNA(3055,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PWNN2","PDCS4FPDN7N5B",#6666,0.0NS, 32MS," PDN ALL CASE NEW w/WDBI                    ")',
   # 'GOSUB FUNA(3056,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","DRNN2","PDCS4FPDN7D5A",#6666,0.0NS, 32MS," PDN ALL CASE NEW w/RDBI                    ")',
   # 'GOSUB FUNA(3057,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FACM7N5A",#6666,0.0NS, 32MS," AADR. CMP INT. Same Bank Group             ")',
   # 'GOSUB FUNA(3058,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FACM7N5B",#6666,0.0NS, 32MS," AADR. CMP INT. Diff Bank Group             ")',
   # 'GOSUB FUNA(3059,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FADC7N5A",#6666,0.0NS,3.9US," Address Compliment                         ")',
   # 'GOSUB FUNA(3060,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FADC7N5N",#6666,0.0NS,3.9US," Address Compliment         BL32            ")',
   # 'GOSUB FUNA(3061,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FADC7D5A",#6666,0.0NS,3.9US," Address Compliment RDBI "1"=4              ")',
   # 'GOSUB FUNA(3062,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FADC7D5B",#6666,0.0NS,3.9US," Address Compliment RDBI "1"<4              ")',
   # 'GOSUB FUNA(3063,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FADC7D5C",#6666,0.0NS,3.9US," Address Compliment RDBI "1">4              ")',
   # 'GOSUB FUNA(3064,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FDBI7N5A",#6666,0.0NS, 1.0S," D/B Interleave                             ")',
   # 'GOSUB FUNA(3065,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FD2I7N5A",#6666,0.0NS, 1.0S," D/B Interleave 2                           ")',
   # 'GOSUB FUNA(3066,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FDB27N5A",#6666,0.0NS, 1.0S," D/B Interleave Gapless 2                   ")',
   # 'GOSUB FUNA(3067,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FDBG7N5A",#6666,0.0NS, 32MS," D/B Interleave Gapless A                   ")',
   # 'GOSUB FUNA(3068,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FDBG7N5B",#6666,0.0NS, 32MS," D/B Interleave Gapless B                   ")',
   # 'GOSUB FUNA(3069,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FGPB7N5A",#6666,0.0NS,3.9US," D/B Interleave Gap test                    ")',
   # 'GOSUB FUNA(3070,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPP47N5A",#6666,0.0NS, 32MS," Ping-Pong Read/Write BL4                   ")',
   # 'GOSUB FUNA(3071,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPR27N5A",#6666,0.0NS,3.9US," Pingpong Read/Write 2                      ")',
   # 'GOSUB FUNA(3072,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPR37N5A",#6666,0.0NS,3.9US," Pingpong Read/Write 3                      ")',
   # 'GOSUB FUNA(3073,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPR37N5N",#6666,0.0NS,3.9US," Pingpong Read/Write 3       BL32           ")',
   # 'GOSUB FUNA(3074,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FAPO7N5A",#6666,0.0NS,3.9US," ALL Auto Precharge                         ")',
   # 'GOSUB FUNA(3075,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FAWR7N5A",#6666,0.0NS, 1.0S," Auto Pre. tWRA Test                        ")',
   # 'GOSUB FUNA(3076,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FIAP7N5A",#6666,0.0NS, 1.0S," Interleave Auto-precharge                  ")',
   # 'GOSUB FUNA(3077,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FAPI7N5A",#6666,0.0NS, 1.0S," Auto-pre & no_AP intleaved test            ")',
   # 'GOSUB FUNA(3078,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FCCD7N5A",#6666,0.0NS, 32MS," CCD Test                                   ")',
   # 'GOSUB FUNA(3079,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FGPT7N5A",#6666,0.0NS,3.9US," WR/RD Gap test                             ")',
   # 'GOSUB FUNA(3080,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FCIP7N5A",#6666,0.0NS, 32MS," Cas Interrupt Precharge                    ")',
   # 'GOSUB FUNA(3081,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FYMA7N5A",#6666,0.0NS, 32MS," Y-march                                    ")',
   # 'GOSUB FUNA(3082,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FYCG7N5A",#6666,0.0NS,3.9US," Y-Compliment Galpless                      ")',
   # 'GOSUB FUNA(3083,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FCYF7N5A",#6666,0.0NS, 32MS," CB Y-Float                                 ")',
   # 'GOSUB FUNA(3084,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FGLY7N5A",#6666,0.0NS,3.9US," DDR Y-GALLOP I                             ")',
   # 'GOSUB FUNA(3085,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FDYG7N5A",#6666,0.0NS, 32MS," Diagonal Y Gallop                          ")',
   # 'GOSUB FUNA(3086,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FCJP7N5A",#6666,0.0NS, 32MS," I4BK IRP WMASK                             ")',
   # 'GOSUB FUNA(3087,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FCJP7N5N",#6666,0.0NS, 32MS," I4BK IRP WMASK             BL32            ")',
   # 'GOSUB FUNA(3088,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FIPM7N5A",#6666,0.0NS,3.9US," I4BK INT FLOAT                             ")',
   # 'GOSUB FUNA(3089,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FIPM7N5N",#6666,0.0NS,3.9US," I4BK INT FLOAT Same         BL32           ")',
   # 'GOSUB FUNA(3090,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FIPM7N5C",#6666,0.0NS,3.9US," I4BK INT FLOAT                             ")',
   # 'GOSUB FUNA(3091,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FIPM7N5M",#6666,0.0NS,3.9US," I4BK INT FLOAT Other        BL32           ")',
   # 'GOSUB FUNA(3092,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPBR7N5A",#0000,0.0NS, 32MS," I4BK INT FLOAT RD Gapless                  ")',
   # 'GOSUB FUNA(3093,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPBR7N5N",#0000,0.0NS, 32MS," I4BK INT FLOAT RD Gapless   BL32           ")',
   # 'GOSUB FUNA(3094,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPBR7N5C",#0000,0.0NS, 32MS," I4BK INT FLOAT RD Bank INV                 ")',
   # 'GOSUB FUNA(3095,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPBR7N5O",#0000,0.0NS, 32MS," I4BK INT FLOAT RD Bank INV  BL32           ")',
   # 'GOSUB FUNA(3096,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPBR7N5B",#0000,0.0NS, 32MS," I4BK INT FLOAT WR Gapless                  ")',
   # 'GOSUB FUNA(3097,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPBR7N5M",#0000,0.0NS, 32MS," I4BK INT FLOAT WR Gapless   BL32           ")',
   # 'GOSUB FUNA(3098,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNNN","PDCS4FPGK7N5A",#6666,0.0NS, 32MS," I4BK Near Bank Row Compl.                  ")',
    'GOSUB FUNA(3099,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","DRNNN","PDCS4FPGK7D5A",#6666,0.0NS, 32MS," I4BK Near Bank Row Compl. DBI              ")',
   # 'GOSUB FUNA(3100,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNNN","PDCS4FPGK7N5N",#6666,0.0NS, 32MS," I4BK Near Bank Row Compl. A BL32           ")',
   # 'GOSUB FUNA(3101,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNNN","PDCS4FPGK7N5M",#6666,0.0NS, 32MS," I4BK Near Bank Row Compl. B BL32           ")',
   # 'GOSUB FUNA(3102,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FPBR7D5A",#0000,0.0NS, 32MS," IPM + PBR Other RDBI "1"=4                 ")',
   # 'GOSUB FUNA(3103,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FPBR7D5B",#0000,0.0NS, 32MS," IPM + PBR Other WDBI "1"<4                 ")',
   # 'GOSUB FUNA(3104,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FPBR7D5C",#0000,0.0NS, 32MS," IPM + PBR Other RDBI "1">4                 ")',
   # 'GOSUB FUNA(3105,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FPBR7D5N",#0000,0.0NS, 32MS," IPM + PBR Other RDBI "1"=4  BL32           ")',
   # 'GOSUB FUNA(3106,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FPBR7D5M",#0000,0.0NS, 32MS," IPM + PBR Other RDBI "1"<4  BL32           ")',
   # 'GOSUB FUNA(3107,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FPBR7D5O",#0000,0.0NS, 32MS," IPM + PBR Other RDBI "1">4  BL32           ")',
   # 'GOSUB FUNA(3108,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FIPM7D5A",#0000,0.0NS,3.9US," I4BK INT FLOAT Same  RDBI "1"=4            ")',
   # 'GOSUB FUNA(3109,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FIPM7D5B",#0000,0.0NS,3.9US," I4BK INT FLOAT Same  RDBI "1"<4            ")',
   # 'GOSUB FUNA(3110,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FIPM7D5C",#0000,0.0NS,3.9US," I4BK INT FLOAT Same  RDBI "1">4            ")',
   # 'GOSUB FUNA(3111,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FIPM7D5D",#0000,0.0NS,3.9US," I4BK INT FLOAT Other RDBI "1"=4            ")',
   # 'GOSUB FUNA(3112,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FIPM7D5E",#0000,0.0NS,3.9US," I4BK INT FLOAT Other RDBI "1"<4            ")',
   # 'GOSUB FUNA(3113,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FIPM7D5F",#0000,0.0NS,3.9US," I4BK INT FLOAT Other RDBI "1">4            ")',
   # 'GOSUB FUNA(3114,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FIPM7D5N",#0000,0.0NS,3.9US," IPM        Same RDBI "1"=4  BL32           ")',
   # 'GOSUB FUNA(3115,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FIPM7D5M",#0000,0.0NS,3.9US," IPM        Same RDBI "1"<4  BL32           ")',
   # 'GOSUB FUNA(3116,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FIPM7D5O",#0000,0.0NS,3.9US," IPM        Same RDBI "1">4  BL32           ")',
   # 'GOSUB FUNA(3117,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FIPM7D5P",#0000,0.0NS,3.9US," IPM       Other RDBI "1"=4  BL32           ")',
   # 'GOSUB FUNA(3118,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FIPM7D5Q",#0000,0.0NS,3.9US," IPM       Other RDBI "1"<4  BL32           ")',
   # 'GOSUB FUNA(3119,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FIPM7D5R",#0000,0.0NS,3.9US," IPM       Other RDBI "1">4  BL32           ")',
   # 'GOSUB FUNA(3120,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4F4YF7N5A",#6666,0.0NS,3.9US," S/B Ltras                                  ")',
   # 'GOSUB FUNA(3121,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FIRN7N5A",#6666,0.0NS,3.9US," I4BK RDSEN                                 ")',
   # 'GOSUB FUNA(3122,6,0,0,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FRCD7N5A",#6666,0.0NS, 1.0S," D/B RCD test                               ")',
   # 'GOSUB FUNA(3123,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FGIO7N5A",#6666,0.0NS, 32MS," I4BK PAGE GIO                              ")',
   # 'GOSUB FUNA(3124,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FMAT7N5A",#6666,0.0NS, 1.0S," Mats Fail Test                             ")',
   # 'GOSUB FUNA(3125,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPCP7N5A",#6666,0.0NS, 32MS," I4BK PMCMP REF                             ")',
   # 'GOSUB FUNA(3126,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FRPD7N5A",#6666,0.0NS, 1.0S," I4BK IRP RDSMKK                            ")',
   # 'GOSUB FUNA(3127,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FECM7N5A",#6666,0.0NS, 32MS," Enhanced Command Mix                       ")',
   # 'GOSUB FUNA(3128,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPRF7N5A",#6666,0.0NS, 1.0S," PBR(tRFCpb,tpbRtopbR,tRFCab)             ")',
   # 'GOSUB FUNA(3129,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PDNN2","PDCS4FDCF7N5E",#0000,0.0NS, 32MS," Daty Copy Func                             ")',
   # 'GOSUB FUNA(3130,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PDNN2","PDCS4FDCF7N5F",#0000,0.0NS, 32MS," Daty Copy Func BL32                        ")',
   # 'GOSUB FUNA(3131,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","LWNN2","PDCS4FLEC7N5A",#6666,0.0NS, 32MS," Lilk ECC w_WDBI/DM                         ")',
   # 'GOSUB FUNA(3132,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","LWNN2","PDCS4FLEC7N5B",#6666,0.0NS, 32MS," Lilk ECC w_WDBI/DM+1bit Error              ")',
   # 'GOSUB FUNA(3133,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FNWR7N5A",#6666,0.0NS, 1.0S," LA-ver nWR Fail                            ")',
   # 'GOSUB FUNA(3134,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FLFF7N5A",#6666,0.0NS, 1.0S," LF-ver WAP Fail                            ")',
   # 'GOSUB FUNA(3135,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FHRG7N5A",#6666,0.0NS, 32MS," HBM    Row Open Glitch                     ")',
   # 'GOSUB FUNA(3136,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNN2","PDCS4FPDS7D5A",#6666,0.0NS,3.9US," NU-ver RDBI_AC Fail  RDBI "1"=4            ")',
   # 'GOSUB FUNA(3137,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FDM67N5A",#6666,0.0NS, 1.0S," 2BK PPONG MASK+1bit Error                  ")',
   # 'GOSUB FUNA(3138,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FD3P7N5A",#6666,0.0NS, 32MS," D/B Interleave 3 Prime                     ")',
   # 'GOSUB FUNA(3139,6,0,0,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FFFR7N5A",#6666,0.0NS, 1.0S," WR FIFO Reset Test Depth 5                 ")',
   # 'GOSUB FUNA(3140,6,0,0,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FFFR7N5B",#6666,0.0NS, 1.0S," WR FIFO Reset Test Depth 8                 ")',
#   # 'GOSUB FUNA(3141,6,0,0,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FWRX7N5E",#6666,0.0NS, 1.0S," Write X Multi  Byte D0/1                   ")',
   # 'GOSUB FUNA(3142,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FWKO7N5E",#0000,0.0NS,3.9US," PR3 (Pingpong Read/Write 3)                ")',
   # 'GOSUB FUNA(3143,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FWKO7N5F",#0000,0.0NS,3.9US," PR3 (Pingpong Read/Write 3)                ")',
   # # 'GOSUB FUNA(3144,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FART7N5A",#6666,0.0NS, 32MS," CJP Base ACT-RD gap Test                   ")',
   # 'GOSUB FUNA(3145,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FART7N5B",#6666,0.0NS, 32MS," CJP Base ACT-RD gap Test                   ")',
   # 'GOSUB FUNA(3146,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FCWS7N5A",#6666,0.0NS, 32MS," OCG CAS WCK Suspend (---)                  ")',
   # 'GOSUB FUNA(3147,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FCWS7N5B",#6666,0.0NS, 1.0S," RMW CAS WCK Suspend (---)                  ")',
   # 'GOSUB FUNA(3148,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","LWND2","PDCS4FLEC7N5D",#0000,0.0NS, 32MS," Link ECC + Error                           ")',
   # 'GOSUB FUNA(3149,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FAPD7N5A",#6666,0.0NS, 1.0S," APD (ACT to PDE,Powerdown Duration Test)  ")',
   # 'GOSUB FUNA(3150,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FAPD7N5B",#6666,0.0NS, 1.0S," APD (PRE to PDE,Powerdown Duration Test)  ")',
   # 'GOSUB FUNA(3151,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FAPD7N5C",#6666,0.0NS, 1.0S," APD (RDA to PDE,Powerdown Duration Test)  ")',
   # 'GOSUB FUNA(3152,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FAPD7N5D",#6666,0.0NS, 1.0S," APD (WRA to PDE,Powerdown Duration Test)  ")',
   # 'GOSUB FUNA(3153,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FAPD7N5E",#6666,0.0NS, 1.0S," APD ( RD to PDE,Powerdown Duration Test)  ")',
   # 'GOSUB FUNA(3154,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FAPD7N5F",#6666,0.0NS, 1.0S," APD ( WR to PDE,Powerdown Duration Test)  ")',
   # 'GOSUB FUNA(3155,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FAPD7N5P",#6666,0.0NS, 1.0S," APD (ACT to PDE,Powerdown Duration Test)  ")',
   # 'GOSUB FUNA(3156,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FAPD7N5Q",#6666,0.0NS, 1.0S," APD (PRE to PDE,Powerdown Duration Test)  ")',
   # 'GOSUB FUNA(3157,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FAPD7N5R",#6666,0.0NS, 1.0S," APD (RDA to PDE,Powerdown Duration Test)  ")',
   # 'GOSUB FUNA(3158,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FAPD7N5S",#6666,0.0NS, 1.0S," APD (WRA to PDE,Powerdown Duration Test)  ")',
   # 'GOSUB FUNA(3159,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FAPD7N5T",#6666,0.0NS, 1.0S," APD ( RD to PDE,Powerdown Duration Test)  ")',
   # 'GOSUB FUNA(3160,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNND2","PDCS4FAGP7N5A",#6666,0.0NS, 1.0S," WR_AP Gap (New I/O Format)                 ")',

   # 'GOSUB FUNA(3096,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPBR7N5B",#0000,0.0NS, 32MS," I4BK INT FLOAT WR Gapless                  ")',
   # 'GOSUB FUNA(3096,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FPBR6N4B",#0000,0.0NS, 32MS," I4BK INT FLOAT WR Gapless                  ")',

	# 'GOSUB FUNA(2047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PWNN2","PDCS6ROTF3N2A",#0000,0.0NS, 32MS," Single Bank OTF                            ")',
	# 'GOSUB FUNA(2047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS6FOCG1N6A",#6666,0.0NS, 32MS," Single Bank OTF                            ")',
	# 'GOSUB FUNA(2047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNN2","PDCS4FDQA6N4Z",#0000,0.0NS, 32MS," Single Bank OTF                            ")',
	# 'GOSUB FUNA(2047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNNN","PDCS4FPGK7N5X",#0000,0.0NS, 32MS," Single Bank OTF                            ")',
	# 'GOSUB FUNA(2047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNNN","PDCS4FPGK7D5X",#0000,0.0NS, 32MS," Single Bank OTF                            ")',
   # 'GOSUB FUNA(3084,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PNNN2","PDCS4FGLY6N4A",#6666,0.0NS,3.9US," DDR Y-GALLOP I                             ")',


	# 'GOSUB FUNA(2047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNNN","PDCS4FPGK7D5B",#0000,0.0NS, 32MS," Single Bank OTF                            ")',
	# 'GOSUB FUNA(2047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNNN","PDCS4FPGK7D5C",#0000,0.0NS, 32MS," Single Bank OTF                            ")',
	# 'GOSUB FUNA(2047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNNN","PDCS4FPGK7D5D",#0000,0.0NS, 32MS," Single Bank OTF                            ")',
 'GOSUB FUNA(2047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNNN","PDCS4FPGK7D5O",#0000,0.0NS, 32MS," Single Bank OTF                            ")',
	# 'GOSUB FUNA(2047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRNNN","PDCS4FPGK7D5P",#0000,0.0NS, 32MS," Single Bank OTF                            ")',
	# 'GOSUB FUNA(2047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNNN","PDCS4FPGK7N5O",#0000,0.0NS, 32MS," Single Bank OTF                            ")',
	# 'GOSUB FUNA(2047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNNNN","PDCS4FPGK7N5P",#0000,0.0NS, 32MS," Single Bank OTF                            ")',

   # 'GOSUB FUNA(3059,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNFE2","PDCS4FADC8N5A",#6666,0.0NS,3.9US," Address Compliment                         ")',
   # 'GOSUB FUNA(3059,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNFO2","PDCS4FADC8N5A",#6666,0.0NS,3.9US," Address Compliment                         ")',
   # 'GOSUB FUNA(3059,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNGE2","PDCS4FADC8N5A",#6666,0.0NS,3.9US," Address Compliment                         ")',
   # 'GOSUB FUNA(3059,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNGO2","PDCS4FADC8N5A",#6666,0.0NS,3.9US," Address Compliment                         ")',

   # 'GOSUB FUNA(3059,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNFE2","PDCS4FGPB8N5A",#6666,0.0NS,3.9US," Address Compliment                         ")',
   # 'GOSUB FUNA(3059,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNFO2","PDCS4FGPB8N5A",#6666,0.0NS,3.9US," Address Compliment                         ")',

   # 'GOSUB FUNA(3059,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNFE2","PDCS4FPR38N5A",#6666,0.0NS,3.9US," Address Compliment                         ")',
   # 'GOSUB FUNA(3059,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNFO2","PDCS4FPR38N5A",#6666,0.0NS,3.9US," Address Compliment                         ")',
	# 'GOSUB FUNAn(4000,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PRNF2","PDCS4SRDC8N5P",#0000,0.0 NS,1.0 S, " RDC                                   ")',
	# 'GOSUB FUNAn(5000,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PRNF2","PDCS4SWFF8N5P",#0000,0.0 NS,1.0 S, " WFF/RFF                               ")',
	# 'GOSUB FUNAn(4070,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FGPB8N5A",#6666,0.0 NS,1.0 S, " D/B Interleave Gap test               ")',
	# 'GOSUB FUNAn(5070,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FGPB8N5A",#6666,0.0 NS,1.0 S, " D/B Interleave Gap test               ")',
	# 'GOSUB FUNAn(4071,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPP48N5A",#6666,0.0 NS,32 MS, " Ping-Pong Read/Write BL4              ")',
	# 'GOSUB FUNAn(5071,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FPP48N5A",#6666,0.0 NS,32 MS, " Ping-Pong Read/Write BL4              ")',

	# 'GOSUB FUNAn(4073,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPR38N5A",#6666,0.0 NS,3.9 US," Pingpong Read/Write 3                 ")',
	# 'GOSUB FUNAn(5073,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FPR38N5A",#6666,0.0 NS,3.9 US," Pingpong Read/Write 3                 ")',
	# 'GOSUB FUNAn(4052,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FOCG8N5A",#6666,0.0 NS,32 MS, " Other Bank Y-Compl Gapless            ")',
	# 'GOSUB FUNAn(5052,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FOCG8N5A",#6666,0.0 NS,32 MS, " Other Bank Y-Compl Gapless            ")',
	# 'GOSUB FUNAn(4091,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8N5Q",#0000,0.0 NS,3.9 US," I4BK INT FLOAT                        ")',
	# 'GOSUB FUNAn(5091,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFO2","PDCS4FIPM8N5Q",#0000,0.0 NS,3.9 US," I4BK INT FLOAT                        ")',
	# 'GOSUB FUNAn(4800,6,3,3,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FADC8N5A",#6666,0.0 NS,3.9 US," Address Compliment                   ")',
	# 'GOSUB FUNAn(5800,6,3,3,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FADC8N5A",#6666,0.0 NS,3.9 US," Address Compliment                   ")',
	# 'GOSUB FUNAn(4097,6,3,3,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPBR8N5A",#6666,0.0 NS,32 MS, " I4BK INT FLOAT RD Gapless             ")',
	# 'GOSUB FUNAn(5097,6,3,3,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FPBR8N5A",#6666,0.0 NS,32 MS, " I4BK INT FLOAT RD Gapless             ")',


	# 'GOSUB FUNAn(4097,6,3,3,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPBR8N5A",#0000,0.0 NS,32 MS, " I4BK INT FLOAT RD Gapless             ")',
	# 'GOSUB FUNAn(5097,6,3,3,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FPBR8N5A",#0000,0.0 NS,32 MS, " I4BK INT FLOAT RD Gapless             ")',


	# 'GOSUB FUNAn(4000,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FI4R8N5A",#0000,0.0 NS,1.0 S," PXI Jump A                            ")',
	# 'GOSUB FUNAn(5000,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FI4R8N5A",#0000,0.0 NS,1.0 S," PXI Jump A                            ")',
	# 'GOSUB FUNAn(4002,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FI8R8N5A",#0000,0.0 NS,32 MS," PXI test : PXI 0,7,1,6    A        ")',
	# 'GOSUB FUNAn(5002,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FI8R8N5A",#0000,0.0 NS,32 MS," PXI test : PXI 0,7,1,6    A        ")',

	# 'GOSUB FUNAn(4004,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FIYF8N5A",#0000,0.0 NS,3.9 US," ROWCMP IBMCLAIM A                     ")',
	# 'GOSUB FUNAn(5004,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FIYF8N5A",#0000,0.0 NS,3.9 US," ROWCMP IBMCLAIM A                     ")',
	# 'GOSUB FUNAn(4006,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FROB8N5A",#0000,0.0 NS,1.0 S," Row Bar test                          ")',
	# 'GOSUB FUNAn(5006,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFO2","PDCS4FROB8N5A",#0000,0.0 NS,1.0 S," Row Bar test                          ")',
	# 'GOSUB FUNAn(4007,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FCOB8N5A",#0000,0.0 NS,1.0 S," Column Bar test                       ")',
	# 'GOSUB FUNAn(5007,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFO2","PDCS4FCOB8N5A",#0000,0.0 NS,1.0 S," Column Bar test                       ")',
	# 'GOSUB FUNAn(4009,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FWFS8N5A",#0000,0.0 NS,1.0 S," WCK FS Column Bar test                ")',
	# 'GOSUB FUNAn(5009,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFO2","PDCS4FWFS8N5A",#0000,0.0 NS,1.0 S," WCK FS Column Bar test                ")',
	# 'GOSUB FUNAn(4011,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FWST8N5A",#0000,0.0 NS,1.0 S," WCK WR PST Column Bar test            ")',
	# 'GOSUB FUNAn(5011,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFO2","PDCS4FWST8N5A",#0000,0.0 NS,1.0 S," WCK WR PST Column Bar test            ")',
	# 'GOSUB FUNAn(4012,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FRST8N5A",#0000,0.0 NS,32 MS," WCK RD PST Column Bar test            ")',
	# 'GOSUB FUNAn(5012,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFO2","PDCS4FRST8N5A",#0000,0.0 NS,32 MS," WCK RD PST Column Bar test            ")',
	# 'GOSUB FUNAn(4013,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FRMW8N5A",#0000,0.0 NS,1.0 S," Read Modify Write                     ")',
	# 'GOSUB FUNAn(5013,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFO2","PDCS4FRMW8N5A",#0000,0.0 NS,1.0 S," Read Modify Write                     ")',
	# # 'GOSUB FUNAn(4017,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FSEL8N5A",#0000,0.0 NS,100 US," I4BK SELF REFRESH NEW                 ")',
	# # 'GOSUB FUNAn(5017,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FSEL8N5A",#0000,0.0 NS,100 US," I4BK SELF REFRESH NEW                 ")',
	# # 'GOSUB FUNAn(4020,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FDSM8N5A",#0000,0.0 NS,  4 MS," SELF REFRESH DSM Mode                 ")',
	# # 'GOSUB FUNAn(5020,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FDSM8N5A",#0000,0.0 NS,  4 MS," SELF REFRESH DSM Mode                 ")',
	# 'GOSUB FUNAn(4022,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FRRD8N5A",#0000,0.0 NS,2.0 US," ACT to PBR,PBR to ACT A              ")',
	# 'GOSUB FUNAn(5022,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FRRD8N5A",#0000,0.0 NS,2.0 US," ACT to PBR,PBR to ACT A              ")',

	# 'GOSUB FUNAn(4027,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNLE2","PDCS4FWRX8N5A",#0000,0.0 NS,3.9 US," Write X Single bank                   ")',
	# 'GOSUB FUNAn(5027,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNLO2","PDCS4FWRX8N5A",#0000,0.0 NS,3.9 US," Write X Single bank                   ")',
	# 'GOSUB FUNAn(4030,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PWKE2","PDCS4FWDI8N5A",#0000,0.0 NS,32 MS," Write DBI A                           ")',
	# 'GOSUB FUNAn(5030,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PWKO2","PDCS4FWDI8N5A",#0000,0.0 NS,32 MS," Write DBI A                           ")',
	# 'GOSUB FUNAn(4035,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PWFE2","PDCS4FLDM8N5A",#0000,0.0 NS,1.0 S," WR DM DBI Test                        ")',
	# 'GOSUB FUNAn(5035,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PWFO2","PDCS4FLDM8N5A",#0000,0.0 NS,1.0 S," WR DM DBI Test                        ")',
	# 'GOSUB FUNAn(4036,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNME2","PDCS4FWDM8N5A",#0000,0.0 NS,32 MS," Write DM tCCDMW 2CK                   ")',
	# 'GOSUB FUNAn(5036,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNMO2","PDCS4FWDM8N5A",#0000,0.0 NS,32 MS," Write DM tCCDMW 2CK                   ")',
 	# 'GOSUB FUNAn(4037,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNKE2","PDCS4FDWN8N5N",#0000,0.0 NS,32 MS," WR_BL32 to Masked WR_BL16             ")',
	# 'GOSUB FUNAn(5037,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNKO2","PDCS4FDWN8N5N",#0000,0.0 NS,32 MS," WR_BL32 to Masked WR_BL16             ")',
	# 'GOSUB FUNAn(4038,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FDM68N5A",#0000,0.0 NS,1.0 S," 2BK PPONG MASK                        ")',
	# 'GOSUB FUNAn(5038,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFO2","PDCS4FDM68N5A",#0000,0.0 NS,1.0 S," 2BK PPONG MASK                        ")',
	# 'GOSUB FUNAn(4042,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNME2","PDCS4FNV48N5A",#0000,0.0 NS,32 MS," NVDIA Claim TSTBLT4                   ")',
	# 'GOSUB FUNAn(5042,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNMO2","PDCS4FNV48N5A",#0000,0.0 NS,32 MS," NVDIA Claim TSTBLT4                   ")',
	# 'GOSUB FUNAn(4044,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FWFR8N5A",#0000,0.0 NS,1.0 S," WCK Free running mode test A          ")',
	# 'GOSUB FUNAn(5044,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFO2","PDCS4FWFR8N5A",#0000,0.0 NS,1.0 S," WCK Free running mode test A          ")',
	# 'GOSUB FUNAn(4046,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FFCW8N5A",#0000,0.0 NS,32 MS," 0xFC write test fail                  ")',
	# 'GOSUB FUNAn(5046,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFO2","PDCS4FFCW8N5A",#0000,0.0 NS,32 MS," 0xFC write test fail                  ")',
	# 'GOSUB FUNAn(4048,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PWLE2","PDCS4FOTF8N5A",#0000,0.0 NS,32 MS," Single Bank OTF                       ")',
	# 'GOSUB FUNAn(5048,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PWLO2","PDCS4FOTF8N5A",#0000,0.0 NS,32 MS," Single Bank OTF                       ")',
   # 'GOSUB FUNAn(3049,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FBLR8N5A",#6666,0.0NS, 1.0S," MOD_2BK PP MASK                        ")',
   # 'GOSUB FUNA(3088,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNFE2","PDCS4FIPM8N5A",#6666,0.0NS,3.9US," I4BK INT FLOAT                             ")',
   # 'GOSUB FUNA(3089,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNFE2","PDCS4FIPM8N5N",#6666,0.0NS,3.9US," I4BK INT FLOAT Same         BL32           ")',
   # 'GOSUB FUNA(3090,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNFE2","PDCS4FIPM8N5C",#6666,0.0NS,3.9US," I4BK INT FLOAT                             ")',

   # 'GOSUB FUNA(3055,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PWFE2","PDCS4FPDN8N5B",#6666,0.0NS, 32MS," PDN ALL CASE NEW w/WDBI                    ")',

   # 'GOSUB FUNA(3057,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNKE2","PDCS4FACM8N5A",#6666,0.0NS, 32MS," AADR. CMP INT. Same Bank Group             ")',
   # 'GOSUB FUNA(3057,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNKO2","PDCS4FACM8N5A",#6666,0.0NS, 32MS," AADR. CMP INT. Same Bank Group             ")',
   # 'GOSUB FUNA(3058,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNKE2","PDCS4FACM8N5B",#6666,0.0NS, 32MS," AADR. CMP INT. Diff Bank Group             ")',
   # 'GOSUB FUNA(3058,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PNKO2","PDCS4FACM8N5B",#6666,0.0NS, 32MS," AADR. CMP INT. Diff Bank Group             ")',

   # 'GOSUB FUNA(4091,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FIPM8N5C",#6666,0.0 NS,3.9US," I4BK INT FLOAT                          ")',
   # 'GOSUB FUNA(4092,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FIPM8N5M",#6666,0.0 NS,3.9US," I4BK INT FLOAT Other        BL32        ")',
   # 'GOSUB FUNA(4093,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPBR8N5A",#0000,0.0 NS,32 MS," I4BK INT FLOAT RD Gapless               ")',
   # 'GOSUB FUNA(4094,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPBR8N5N",#0000,0.0 NS,32 MS," I4BK INT FLOAT RD Gapless   BL32        ")',
   # 'GOSUB FUNA(4095,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPBR8N5C",#0000,0.0 NS,32 MS," I4BK INT FLOAT RD Bank INV              ")',
   # 'GOSUB FUNA(4096,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPBR8N5O",#0000,0.0 NS,32 MS," I4BK INT FLOAT RD Bank INV  BL32        ")',
   # 'GOSUB FUNA(4097,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPBR8N5B",#0000,0.0 NS,32 MS," I4BK INT FLOAT WR Gapless               ")',
   # 'GOSUB FUNA(4098,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPBR8N5M",#0000,0.0 NS,32 MS," I4BK INT FLOAT WR Gapless   BL32        ")',

   # 'GOSUB FUNA(4094,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FPBR8N5N",#0000,0.0 NS,32 MS," I4BK INT FLOAT RD Gapless   BL32        ")',
   # 'GOSUB FUNA(4097,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FPBR8N5B",#0000,0.0 NS,32 MS," I4BK INT FLOAT WR Gapless               ")',
   # 'GOSUB FUNA(4098,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FPBR8N5M",#0000,0.0 NS,32 MS," I4BK INT FLOAT WR Gapless   BL32        ")',

   # 'GOSUB FUNA(4099,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPGK8N5A",#6666,0.0 NS,32 MS," I4BK Near Bank Row Compl.               ")',
   # 'GOSUB FUNA(4101,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPGK8N5N",#6666,0.0 NS,32 MS," I4BK Near Bank Row Compl. B BL32        ")',
   # 'GOSUB FUNA(4102,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPGK8N5M",#6666,0.0 NS,32 MS," I4BK Near Bank Row Compl. B BL32        ")',
   # 'GOSUB FUNA(3065,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FD2I8N5A",#6666,0.0NS, 1.0S," D/B Interleave 2                           ")',
   # 'GOSUB FUNA(3061,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRFE2","PDCS4FADC8D5A",#6666,0.0NS,3.9US," Address Compliment RDBI "1"=4              ")',
   # 'GOSUB FUNA(3062,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRFE2","PDCS4FADC8D5B",#6666,0.0NS,3.9US," Address Compliment RDBI "1"<4              ")',
   # 'GOSUB FUNA(3063,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRFE2","PDCS4FADC8D5C",#6666,0.0NS,3.9US," Address Compliment RDBI "1">4              ")',

	# ' GOSUB FUNAn(4065,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FDBI8N5A",#6666,0.0NS,3.9US," D/B Interleave                        ")',
	# ' GOSUB FUNAn(5065,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FDBI8N5A",#6666,0.0NS,3.9US," D/B Interleave                        ")',
	# ' GOSUB FUNAn(4066,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FD2I8N5A",#6666,0.0NS,3.9US," D/B Interleave 2                      ")',
	# ' GOSUB FUNAn(4066,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FD2I8N5A",#6666,0.0NS,3.9US," D/B Interleave 2                      ")',
	# ' GOSUB FUNAn(4068,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FDBG8N5A",#6666,0.0NS,3.9US," D/B Interleave Gapless A              ")',
	# ' GOSUB FUNAn(4069,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FDBG8N5B",#6666,0.0NS,1.0S," D/B Interleave Gapless B              ")',
	# ' GOSUB FUNAn(4072,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPR28N5A",#6666,0.0NS,3.9US," Pingpong Read/Write 2                 ")',
	# ' GOSUB FUNAn(4074,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPR38N5N",#0000,0.0NS,3.9US," Pingpong Read/Write 3       BL32      ")',
	# ' GOSUB FUNAn(4075,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FAPO8N5A",#0000,0.0NS,3.9US," ALL Auto Precharge                    ")',
	# ' GOSUB FUNAn(4076,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FAWR8N5A",#0000,0.0NS,3.9US," Auto Pre. tWRA Test                   ")',
	# ' GOSUB FUNAn(4078,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FAPI8N5A",#0000,0.0NS,3.9US," Auto-pre & no_AP intleaved test       ")',
	# ' GOSUB FUNAn(4079,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FCCD8N5A",#0000,0.0NS,32MS," CCD Test                              ")',

	# ' GOSUB FUNAn(4075,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FAPO8N5A",#0000,0.0NS,3.9US," ALL Auto Precharge                    ")',
	# ' GOSUB FUNAn(4078,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFO2","PDCS4FAPI8N5A",#0000,0.0NS,3.9US," Auto-pre & no_AP intleaved test       ")',

	# 'GOSUB FUNAn(3580,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FGPT8N5A",#6666,0.0 NS,3.9 US," WR/RD Gap test                        ")',
	# 'GOSUB FUNAn(3581,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FCIP8N5A",#6666,0.0 NS,32 MS," Cas Interrupt Precharge               ")',
	# 'GOSUB FUNAn(3582,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FYMA8N5A",#6666,0.0 NS,32 MS," Y-march                               ")',
	# 'GOSUB FUNAn(3583,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FYCG8N5A",#6666,0.0 NS,3.9 US," Y-Compliment Galpless                 ")',
	# 'GOSUB FUNAn(3585,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FGLY8N5A",#6666,0.0 NS,3.9 US," DDR Y-GALLOP I                        ")',
	# 'GOSUB FUNAn(3587,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FCJP8N5A",#6666,0.0 NS,32 MS," I4BK IRP WMASK                        ")',
	# 'GOSUB FUNAn(3588,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FCJP8N5N",#6666,0.0 NS,32 MS," I4BK IRP WMASK             BL32       ")',


	# 'GOSUB FUNAn(3621,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4F4YF8N5A",#6666,0.0 NS,3.9 US," S/B Ltras                             ")',
	# 'GOSUB FUNAn(3622,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FIRN8N5A",#6666,0.0 NS,3.9 US," I4BK RDSEN                            ")',
	# 'GOSUB FUNAn(3623,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FRCD8N5A",#6666,0.0 NS,1.0 S," D/B RCD test                          ")',
	# 'GOSUB FUNAn(3624,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FGIO8N5A",#6666,0.0 NS,32 MS," I4BK PAGE GIO                         ")',
	# 'GOSUB FUNAn(3625,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FMAT8N5A",#6666,0.0 NS,1.0 S," Mats Fail Test                        ")',
	# 'GOSUB FUNAn(3626,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPCP8N5A",#6666,0.0 NS,32 MS," I4BK PMCMP REF                        ")',
	# 'GOSUB FUNAn(3627,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FRPD8N5A",#6666,0.0 NS,3.9 US," I4BK IRP RDSMKK                       ")',
	# 'GOSUB FUNAn(3628,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FECM8N5A",#6666,0.0 NS,32 MS," Enhanced Command Mix                  ")',
	# 'GOSUB FUNAn(3629,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FPRF8N5A",#6666,0.0 NS,32 MS," PBR(tRFCpb,tpbRtopbR,tRFCab)          ")',
	# 'GOSUB FUNAn(3632,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FNWR8N5A",#6666,0.0 NS,1.0 S," LA-ver nWR Fail                       ")',
	# 'GOSUB FUNAn(3633,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FLFF8N5A",#6666,0.0 NS,1.0 S," LF-ver WAP Fail                       ")',
	# 'GOSUB FUNAn(3634,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FHRG8N5A",#6666,0.0 NS,32 MS," HBM    Row Open Glitch                ")',
	# 'GOSUB FUNAn(3554,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FOCG8N5N",#6666,0.0 NS,32 MS," Other Bank Y-Compl Gapless  BL32      ")',

	# 'GOSUB FUNAn(3549,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PWLE2","PDCS4FOTF8N5B",0x0000,0.0 NS,32 MS," Multi  Bank OTF                       ")',
	# 'GOSUB FUNAn(3552,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FOCG8N5O",0x0000,0.0 NS,32 MS," OCG   tAAD                  BL32      ")',
	# 'GOSUB FUNAn(3556,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PWLO2","PDCS4FPDN8N5B",0x0000,0.0 NS,32 MS," PDN ALL CASE NEW w/WDBI               ")',
	# 'GOSUB FUNAn(3557,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","DRFE2","PDCS4FPDN8D5A",0x6666,0.0 NS, 32 MS," PDN ALL CASE NEW w/RDBI               ")',
	# 'GOSUB FUNAn(3561,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FADC8N5N",0x6666,0.0 NS,3.9 US," Address Compliment         BL32       ")',
	# 'GOSUB FUNAn(3562,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FADC8D5A",0x6666,0.0 NS,3.9 US," Address Compliment RDBI 1=4         ")',
	# 'GOSUB FUNAn(3563,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FADC8D5B",0x6666,0.0 NS,3.9 US," Address Compliment RDBI 1<4         ")',
	# 'GOSUB FUNAn(3564,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FADC8D5C",0x6666,0.0 NS,3.9 US," Address Compliment RDBI 1>4         ")',
	# 'GOSUB FUNAn(3635,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FPDS8D5A",0x6666,0.0 NS,3.9 US," NU-ver RDBI_AC Fail  RDBI 1=4       ")',

		# 'GOSUB FUNAn(3599,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","DRFE2","PDCS4FPGK8D5A",0x6666,0.0 NS,32 MS," I4BK Near Bank Row Compl. DBI         ")',
		# 'GOSUB FUNAn(3602,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FPBR8D5A",0x0000,0.0 NS,32 MS," IPM + PBR Other RDBI "1"=4            ")',
		# 'GOSUB FUNAn(3603,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FPBR8D5B",0x0000,0.0 NS,32 MS," IPM + PBR Other WDBI "1"<4            ")',
		# 'GOSUB FUNAn(3604,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FPBR8D5C",0x0000,0.0 NS,32 MS," IPM + PBR Other RDBI "1">4            ")',
		# 'GOSUB FUNAn(3605,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FPBR8D5N",0x0000,0.0 NS,32 MS," IPM + PBR Other RDBI "1"=4  BL32      ")',
		# 'GOSUB FUNAn(3606,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FPBR8D5M",0x0000,0.0 NS,32 MS," IPM + PBR Other RDBI "1"<4  BL32      ")',
		# 'GOSUB FUNAn(3607,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FPBR8D5O",0x0000,0.0 NS,32 MS," IPM + PBR Other RDBI "1">4  BL32      ")',
		# 'GOSUB FUNAn(3608,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8D5A",0x0000,0.0 NS,3.9 US," I4BK INT FLOAT Same  RDBI "1"=4      ")',
		# 'GOSUB FUNAn(3609,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8D5B",0x0000,0.0 NS,3.9 US," I4BK INT FLOAT Same  RDBI "1"<4      ")',
		# 'GOSUB FUNAn(3611,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8D5D",0x0000,0.0 NS,3.9 US," I4BK INT FLOAT Other RDBI "1"=4      ")',


      # 'GOSUB 	FUNAn(3501,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFEN","PDCS4FI4R8N5B",0x6666,0.0 NS,1.0 S," PXI Jump B                            ")',
      # 'GOSUB 	FUNAn(3503,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFEN","PDCS4FI8R8N5B",0x6666,0.0 NS,32 MS," PXI test : PXI 0,7,1,6    B        ")',
      # 'GOSUB 	FUNAn(3505,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FIYF8N5B",0x6666,0.0 NS,3.9 US," ROWCMP IBMCLAIM B                    ")',
      # 'GOSUB 	FUNAn(3510,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FWFS8N5B",0x6666,0.0 NS,1.0 S," WCK FS Read Modify Write              ")',
      # 'GOSUB 	FUNAn(3514,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FRMW8N5B",0x6666,0.0 NS,1.0 S," RMW WR-RD-MWR(A);-RD-MWR-WR(A);-RD    ")',
      # 'GOSUB 	FUNAn(3516,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FRMW8N5N",0x6666,0.0 NS,100 US," Read Modify Write          BL32      ")',
      # 'GOSUB 	FUNAn(3523,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FRRD8N5B",0x6666,0.0 NS, 1.0 S," ACT to PBR,PBR to ACT B             ")',
      # 'GOSUB 	FUNAn(3531,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PWKE2","PDCS4FWDI8N5B",0x0000,0.0 NS,32 MS," Write DBI B                           ")',
      # 'GOSUB 	FUNAn(3532,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PWKE2","PDCS4FWDI8N5C",0x0000,0.0 NS,32 MS," Write DBI C                           ")',
      # 'GOSUB 	FUNAn(3533,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PWKE2","PDCS4FWDI8N5N",0x0000,0.0 NS,32 MS," Write DBI A                 BL32      ")',
      # 'GOSUB 	FUNAn(3534,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PWKE2","PDCS4FWDI8N5M",0x0000,0.0 NS,32 MS," Write DBI B                 BL32      ")',

		# 'GOSUB FUNAn(3608,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8D5C",0x0000,0.0 NS,3.9 US," I4BK INT FLOAT Same  RDBI "1"=4      ")',
		# 'GOSUB FUNAn(3609,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8D5D",0x0000,0.0 NS,3.9 US," I4BK INT FLOAT Same  RDBI "1"<4      ")',
		# 'GOSUB FUNAn(3611,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8D5E",0x0000,0.0 NS,3.9 US," I4BK INT FLOAT Other RDBI "1"=4      ")',
		# 'GOSUB FUNAn(3608,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8D5F",0x0000,0.0 NS,3.9 US," I4BK INT FLOAT Same  RDBI "1"=4      ")',
		# 'GOSUB FUNAn(3609,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8D5M",0x0000,0.0 NS,3.9 US," I4BK INT FLOAT Same  RDBI "1"<4      ")',
		# 'GOSUB FUNAn(3611,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8D5N",0x0000,0.0 NS,3.9 US," I4BK INT FLOAT Other RDBI "1"=4      ")',
		# 'GOSUB FUNAn(3608,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8D5O",0x0000,0.0 NS,3.9 US," I4BK INT FLOAT Same  RDBI "1"=4      ")',
		# 'GOSUB FUNAn(3609,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8D5P",0x0000,0.0 NS,3.9 US," I4BK INT FLOAT Same  RDBI "1"<4      ")',
		# 'GOSUB FUNAn(3611,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8D5Q",0x0000,0.0 NS,3.9 US," I4BK INT FLOAT Other RDBI "1"=4      ")',
		# 'GOSUB FUNAn(3611,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PRFE2","PDCS4FIPM8D5R",0x0000,0.0 NS,3.9 US," I4BK INT FLOAT Other RDBI "1"=4      ")',

   # 'GOSUB FUNA(3024,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FIOM8N5A",#6666,0.0NS,3.9US," IO MOVING                                  ")',
   # 'GOSUB FUNA(3025,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FNIF8N5A",#6666,0.0NS, 1.0S," New I/O Format                             ")',
   # 'GOSUB FUNA(3026,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FI2F8N5A",#6666,0.0NS,3.9US," New I/O Format2                            ")',
   # 'GOSUB FUNA(3039,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FNV38N5A",#6666,0.0NS, 1.0S," NVDIA Claim TSTBLT3 A                      ")',
   # 'GOSUB FUNA(3040,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FNV38N5B",#6666,0.0NS, 1.0S," NVDIA Claim TSTBLT3 B                      ")',

	# 'FUNAn(3528,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FWRX8N5B",0x0000,0.0 NS,3.9 US," Write X Multi  bank CASE A            ");    ',
	# 'FUNAn(3529,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FWRX8N5C",0x0000,0.0 NS, 32 MS," Write X Multi  bank CASE B            ");    ',
	# 'FUNAn(3542,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FNV58N5A",0x6666,0.0 NS,32 MS," NVDIA Claim TSTBLT5                   ");     ',
	# 'FUNAn(3544,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FWFR8N5B",0x6666,0.0 NS,3.9 US," WCK Free running mode test B          ");    ',
	# 'FUNAn(3546,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FFCR8N5A",0x6666,0.0 NS,32 MS," 0xFC read  test fail                  ");     ',
	# 'FUNAn(3550,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FAAD8N5A",0x6666,0.0 NS,32 MS," ACT1 to ACT Gap TEST                  ");     ',
	# 'FUNAn(3566,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FDB28N5A",0x6666,0.0 NS,1.0 S," D/B Interleave Gapless 2              ");     ',
	# 'FUNAn(3672,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFEN","PDCS4FPGK8N5O",0x0000,0.0 NS,32 MS," I4BK Near Bank Row Compl.                  ");',
	# 'FUNAn(3673,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFEN","PDCS4FPGK8N5P",0x0000,0.0 NS,32 MS," I4BK Near Bank Row Compl.                  ");',
#'FUNAn(3674,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","DRFEN","PDCS4FPGK8D5O",0x0000,0.0 NS,32 MS," I4BK Near Bank Row Compl. DBI              ");',
	# 'FUNAn(3675,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","DRFEN","PDCS4FPGK8D5P",0x0000,0.0 NS,32 MS," I4BK Near Bank Row Compl. DBI              ");',

   # 'GOSUB FUNA(3076,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FIAP8N5A",#6666,0.0NS, 1.0S," Interleave Auto-precharge                  ")',

	# 'GOSUB FUNAn(3581,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FCIP8N5A",#6666,0.0 NS,32 MS," Cas Interrupt Precharge               ")',
   # 'GOSUB FUNA(3055,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD01","PWFE2","PDCS4FPDN8N5B",#6666,0.0NS, 32MS," PDN ALL CASE NEW w/WDBI                    ")',

	# 'FUNAn(3542,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FNV28N5A",0x6666,0.0 NS,32 MS," NVDIA Claim TSTBLT5                   ");     ',
   # 'GOSUB FUNA(3583,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FCYF8N5A",#6666,0.0NS, 32MS," CB Y-Float                                 ")',
   # 'GOSUB FUNA(3018,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FSEL8N5B",#6666,0.0NS,100US," I4BK SELF REFRESH NEW W/WFF/RFF            ")',
   # 'GOSUB FUNA(3021,6,0,0,183,LP5VD2,LP5TCK,"VND01","FTS02","PNFE2","PDCS4FDSM8N5B",#6666,0.0NS,100US," SELF REFRESH DSM Mode SHORT                ")',

	# 'GOSUB FUNAn(4007,6,4,4,183,LP5VD2,LP5TCK,"VND01","FTS01","PNFE2","PDCS4FCOB8N5N",#0000,0.0 NS,1.0 S," Column Bar test                       ")',
#	'GOSUB FUNA(2047,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","DRNNN","PDCS4FDBT7D5N",#0000,0.0NS, 32MS," Single Bank OTF                            ")',

  ]
	

# print(patnlist[0][5:len(patnlist[0])-1].split(','))


# 1개 패턴 씩 추출 시작
for ipat in range(len(patnlist)):
   print(patnlist[ipat])
   #---------------- init
   xyreg_=[0]*100
   dreg_=[0]*200
   dreg_region=[0]*200
   tpreg_=[0]*100

   tp1=0
   tp2=0
   tp1_=[0,0,0,0,0]
   tp2_=[0,0,0,0,0]
   jzd_status=0
   dinv=0


   # default 조건
   for idr in range(len(dreg_name)):
      if dreg_name[idr]=='D2A_1':
         dreg_[idr]=int('0x3f0',16)
      elif dreg_name[idr]=='D2A_2':
         dreg_[idr]=int('0x3f0',16)
      elif dreg_name[idr]=='D3B_1':
         dreg_[idr]=int('0xffff',16)
      elif dreg_name[idr]=='D4B_1':
         dreg_[idr]=int('0x20',16)
      elif dreg_name[idr]=='D4B_2':
         dreg_[idr]=int('0x20',16)

   # for itp in range(len(tpreg_name)):
   #    if tpreg_name[itp]=='TPH1A_1':
   #       tpreg_[itp]=int('0x6666',16)
   #    if tpreg_name[itp]=='TPH2A_1':
   #       tpreg_[itp]=int('0x6666',16)

   x_addr=0
   y_addr=0

   label_name=['']*240
   label_pc=[0]*240
   label_idx=[0]*240
   ccflg='1011000000000001'

   header_sdef_alias=['']*3000
   header_sdef_desc=['']*3000
   header_sdef_cbit=['']*3000
   sdef_idx=0

   # x max address
   xsp=127

   #---------------- 


   if len(patnlist[ipat])<10:
      continue
   dreg_region=[0]*200

   # print(patnlist[ipat])
   patn_lst=patnlist[ipat][5:len(patnlist[ipat])-1].split(',')
   # patn_name=patn_lst[10].strip('"')+'NN.asc'
   patn_fmt=patn_lst[8].strip('"')
   patn_mode=patn_lst[9].strip('"')
   patn_iofmt=patn_lst[11]
   patn_scr=patn_lst[9].strip('"')[4]
   patn_tn=patn_lst[0]

   patn_name=patn_lst[10].strip('"')+'.asc'
   if patn_mode[3]!='E' and patn_mode[3]!='O': patn_name=patn_lst[10].strip('"')+'NN.asc'   
   

   if patn_mode[0]=='D':
      dinv=1
   if patn_scr=='2':
      xsp=0x7f
   if patn_scr=='N':
      xsp=0xffff

   # print(patn_scr,xsp)

   if patn_fmt=='FTD01':
      pat_format='FMD01'
   elif patn_fmt=='FTD02':
      pat_format='FMD02'
   else:
      pat_format=patn_fmt

   HSC_MODE=""
   if patn_mode[2]=='F':
      HSC_MODE="HSDI_OTF"
      # print("HSDI_OTF")
      if patn_mode[3]=='E': ccflg='0000000000010100'
      if patn_mode[3]=='O': ccflg='0000000000011000'
   elif patn_mode[2]=='G':
      HSC_MODE="HSDI_OTF_ODD"
      # print("HSDI_OTF_ODD")
      if patn_mode[3]=='E': ccflg='0000000000110100'
      if patn_mode[3]=='O': ccflg='0000000000111000'
   elif patn_mode[2]=='K':
      HSC_MODE="HSDI/DM_OTF"
      # print("HSDI/DM_OTF_ODD")
      if patn_mode[3]=='E': ccflg='0000000001010100'
      if patn_mode[3]=='O': ccflg='0000000001011000'
   elif patn_mode[2]=='L':
      HSC_MODE="HSDI_OTF/DMNI"
      # print("HSDI/DM_OTF_ODD")
      if patn_mode[3]=='E': ccflg='0000000010010100'
      if patn_mode[3]=='O': ccflg='0000000010011000'
   elif patn_mode[2]=='M':
      HSC_MODE="HSDI_OTF/DMI"
      # print("HSDI/DM_OTF_ODD")
      if patn_mode[3]=='E': ccflg='0000000011010100'
      if patn_mode[3]=='O': ccflg='0000000011011000'
   elif patn_mode[2]=='O':
      HSC_MODE="HSDI/DM_OTF_ODD"
      # print("HSDI/DM_OTF_ODD")
      if patn_mode[3]=='E': ccflg='0000000001010100'
      if patn_mode[3]=='O': ccflg='0000000001011000'

   compile_opt_=0
   compile_opt1=''
   compile_opt2=''
   if patn_mode[2] in ['C','G','I','O','P','Q']:
      compile_opt1='B'
   else:
      compile_opt1='A'

   if patn_mode[3]=='E': compile_opt2='E'
   if patn_mode[3]=='O': compile_opt2='O'

   print(patn_mode,patn_mode[2],patn_mode[3],compile_opt1,compile_opt2,HSC_MODE)



   # index or loop cnt 파일 추출 반영
   region_src = open('WHREGION.asc','r')
   rlabel='ABCDEF:'      
   rlabel_set=''
   for rline in region_src:
      rline_tmp=rline.split()
      if patn_name[6:13] in rline and rlabel=='ABCDEF:':
         rlabel=rline_tmp[len(rline_tmp)-1]+":"
      if rlabel in rline and rlabel!='ABCDEF:':
         rlabel_set='Y'
         # print(rline)
      elif rlabel_set=='Y' and len(rline_tmp)>0:
         # print(rline)         
         if rline_tmp[0]=='GOTO':
            rlabel_set=''
         if rline_tmp[0]=='REG' and rline_tmp[2][0]=='D':
            if rline_tmp[2]=='D1': rline_tmp[2]='D1A_1'
            if rline_tmp[2]=='D2': rline_tmp[2]='D2A_1' 
            if rline_tmp[2]=='D1_2': rline_tmp[2]='D1A_2'
            if rline_tmp[2]=='D2_2': rline_tmp[2]='D2A_2' 
            if rline_tmp[2]=='D1_3': rline_tmp[2]='D1A_3'
            if rline_tmp[2]=='D2_3': rline_tmp[2]='D2A_3' 
            if rline_tmp[2]=='D1_4': rline_tmp[2]='D1A_4'
            if rline_tmp[2]=='D2_4': rline_tmp[2]='D2A_4' 
            if rline_tmp[2]=='D3B': rline_tmp[2]='D3B_1' 
            if rline_tmp[2]=='D4B': rline_tmp[2]='D4B_1' 
            if rline_tmp[2]=='D5': rline_tmp[2]='D5_1'
            if rline_tmp[2]=='D6': rline_tmp[2]='D6_1' 
            
            for idr in range(len(dreg_name)):
               if dreg_name[idr]==rline_tmp[2]:
                  dreg_region[idr]=1
                  print(rline_tmp)
                  if rline_tmp[4]=='XSP':
                     dreg_[idr]=xsp
                     # print(dreg_name[idr],xsp)
                  elif rline_tmp[4][0]=='#':
                     dreg_[idr]=int(rline_tmp[4][1:],16)
                  elif rline_tmp[4]=='(XSP+1)/2':
                     dreg_[idr]=int((xsp+1)/2)
                  # print(idr,dreg_name[idr],dreg_[idr],rline_tmp[4])


   # src = open(src_file,'r')
   src = open(patn_name,'r')
   linecnt=0
   patt_start=0
   patt_register=0
   bn_use=0

   # pattern parsing : alias 해제 / insert 해제 
   for line in src:
      tmpline=line
      tmpsplit=line.split()
      # if len(tmpsplit)>0:
      # if linecnt<100:
         # print(line,end='')
         # if len(tmpsplit)>0:
            # print(tmpsplit[0])
      if len(tmpsplit)>0:  # 빈행 제거
         if tmpsplit[0][0]!=';': # 행 전체가 주석 처리 된 것 정리
            if patt_start==0 and patt_register==0: # pattern 처음 부터 reigster 선언 전 까지 
               if tmpsplit[0]=='INSERT':
                  if tmpsplit[1].find('MB')>-1: # B/N register 사용 경우 구분
                     bn_use=1                
                  ins_file_naem=tmpsplit[1]
                  ins_src = open(path+ins_file_naem+'.asc','r')
                  for ins_line in ins_src:  # insert 파일 오픈
                     ins_tmpline=ins_line
                     ins_tmpsplit=ins_line.split()
                     if len(ins_tmpsplit)>1:  #빈행 및 주석 라인 제거
                        # if ins_tmpsplit[0]='%IFE': ----nn
                        if ins_tmpsplit[0]=="%IFE":                           
                           if ins_tmpsplit[1]!=compile_opt1 and ins_tmpsplit[1]!=compile_opt2 and (compile_opt2 not in ins_tmpsplit[1].split('.')):
                              compile_opt_=1
                           else:
                              compile_opt_=0
                              print("-",ins_tmpsplit,compile_opt1,compile_opt2)
                           
                        elif ins_tmpsplit[0]=="%ENDC":
                           compile_opt_=0

                        if compile_opt_==0:   
                           if ins_tmpsplit[0][0]!=';' and ins_tmpline[0:10].find('SDEF')>-1: # SEDF 있는 것만 반영
                              # print(ins_line,end='')
                              if ins_tmpsplit[1][len(ins_tmpsplit[1])-1]=='=':   # ex) SDEF A= ?  아마 잘못된 듯...
                                 header_sdef_alias[sdef_idx]=ins_tmpsplit[1][len(ins_tmpsplit[1])-2]   
                                 # print('===')
                              else:
                                 # print(ins_tmpline,sdef_idx)
                                 header_sdef_alias[sdef_idx]=ins_tmpsplit[1]  # SDEF A = B   에서 A 저장
                                 for ij in range(3,len(ins_tmpsplit)):  # B에서 미리  SDEF로 선언된 alias 찾아 반영
                                    desc_match=0
                                    # print(ins_tmpsplit[ij])
                                    for ik in range(sdef_idx):
                                       # print(ik,header_sdef_alias[sdef_idx])   
                                       if ins_tmpsplit[ij]==header_sdef_alias[ik]:
                                          # print(ins_tmpsplit[ij],header_sdef_desc[ik])
                                          header_sdef_cbit[sdef_idx]=header_sdef_cbit[sdef_idx]+header_sdef_cbit[ik]+' '  # 있을 경우
                                          # header_sdef_cbit[sdef_idx]=header_sdef_cbit[sdef_idx]+header_sdef_desc[ik]+' '  # 있을 경우
                                          # print(ins_tmpsplit[ij]," - ",header_sdef_desc[ik]," - ",header_sdef_cbit[sdef_idx])
                                          desc_match=1
                                    if desc_match==0:  # 없을 경우
                                       # print('-',end='')
                                       # print(ins_tmpsplit[ij],ins_tmpsplit[1])
                                       header_sdef_cbit[sdef_idx]=header_sdef_cbit[sdef_idx]+ins_tmpsplit[ij]+' '
                                    # print(ij,ins_tmpsplit[ij]," - ",header_sdef_cbit[sdef_idx])
                              header_sdef_desc[sdef_idx]=ins_tmpline[ins_tmpline.find('=')+2:len(ins_tmpline)-1] # 원형 저장
                              # if ins_line.find("YAD2")>-1: 
                              #    print("~~~",ins_line)   
                              #    print(header_sdef_alias[sdef_idx],header_sdef_desc[sdef_idx])
                              # print("0^^ :",header_sdef_desc[sdef_idx])
                              # print("1-- :",header_sdef_cbit[sdef_idx])
                              sdef_idx=sdef_idx+1
                           # if ins_line.find("YAD2")>-1: print("~~~",ins_line)
                     # if ins_line.find("YAD2")>-1: print(ins_line)
                     # if header_sdef_desc[sdef_idx-1].find("YAD2ALL")>-1: print("^",ins_line)
                  ins_src.close()
                  # print(header_sdef_desc)
                  
               else: # insert 파일 밖에서 선언된 SDEF 처리
                  if len(tmpsplit)>1:
                     # print(tmpsplit)
                     if tmpsplit[0][0]!=';' and tmpline[0:10].find('SDEF')>-1:
                        if tmpsplit[1][len(tmpsplit[1])-1]=='=':
                           header_sdef_alias[sdef_idx]=tmpsplit[1][len(tmpsplit[1])-2]   
                        else:
                           header_sdef_alias[sdef_idx]=tmpsplit[1]
                           for ij in range(3,len(tmpsplit)):
                              desc_match=0
                              for ik in range(sdef_idx):
                                 if tmpsplit[ij]==header_sdef_alias[ik]:
                                    # header_sdef_cbit[sdef_idx]=header_sdef_cbit[sdef_idx]+header_sdef_desc[ik]+' '
                                    header_sdef_cbit[sdef_idx]=header_sdef_cbit[sdef_idx]+header_sdef_cbit[ik]+' '
                                    desc_match=1
                              if desc_match==0:
                                 header_sdef_cbit[sdef_idx]=header_sdef_cbit[sdef_idx]+tmpsplit[ij]+' '
                        header_sdef_desc[sdef_idx]=tmpline[tmpline.find('=')+2:len(tmpline)-1]
                        sdef_idx=sdef_idx+1

            if patt_start==1:  # pattern 시작 
               
               tmpline_cb=''
               if tmpline.find(';')>-1:  # 주석 문이 있을 경우   주석 전까지만 추출
                  tmpsplit=tmpline[:tmpline.find(';')].split()
               else:
                  tmpsplit=tmpline.split()

               # if tmpline.find("YAD2ALL")>-1:
               #    print(tmpline)


               if tmpsplit[0]=='INSERT': # insert 1
                  # print(tmpsplit)
                  ins_file_naem=tmpsplit[1]
                  ins_src = open(path+ins_file_naem+'.asc','r')
                  for ins_line in ins_src:
                     tmpline_cb=''
                     ins_tmpline=ins_line
                     # ins_tmpsplit=ins_line.split()
                     if ins_tmpline.find(';')>-1:
                        ins_tmpsplit=ins_tmpline[:ins_tmpline.find(';')].split()
                     else:
                        ins_tmpsplit=ins_tmpline.split()

                     if len(ins_tmpsplit)>0:
                        if ins_tmpsplit[0]=='INSERT':   # insert 2
                           ins_file_naem2=ins_tmpsplit[1]
                           ins_src2 = open(path+ins_file_naem2+'.asc','r')
                           for ins_line2 in ins_src2:
                              tmpline_cb=''
                              ins_tmpline2=ins_line2
                              # ins_tmpsplit=ins_line.split()
                              if ins_tmpline2.find(';')>0:
                                 ins_tmpsplit2=ins_tmpline2[:ins_tmpline2.find(';')].split()
                              else:
                                 ins_tmpsplit2=ins_tmpline2.split()
                              if len(ins_tmpsplit2)>0:
                                 if ins_tmpsplit2[0][0]!=';':
                                    for ik in range(len(ins_tmpsplit2)):
                                       alias_match=0
                                       for ik2 in range(sdef_idx):
                                          if ins_tmpsplit2[ik]==header_sdef_alias[ik2]:
                                             tmpline_cb=tmpline_cb+header_sdef_cbit[ik2]+' '
                                             alias_match=1                                             
                                       if alias_match==0:
                                          tmpline_cb=tmpline_cb+ins_tmpsplit2[ik]+' '
                                    # print(ins_tmpsplit,"-",tmpline_cb.split())
                                    patline[linecnt]=tmpline_cb
                                    linecnt=linecnt+1
                                    patline.append([''])
                        else:
                           if ins_tmpsplit[0][0]!=';':
                              for ik in range(len(ins_tmpsplit)):
                                 alias_match=0
                                 for ik2 in range(sdef_idx):
                                    if ins_tmpsplit[ik]==header_sdef_alias[ik2]:
                                       tmpline_cb=tmpline_cb+header_sdef_cbit[ik2]+' '
                                       alias_match=1
                                 if alias_match==0:
                                    tmpline_cb=tmpline_cb+ins_tmpsplit[ik]+' '
                              # print(ins_tmpsplit,"-",tmpline_cb.split())
                              patline[linecnt]=tmpline_cb
                              linecnt=linecnt+1
                              patline.append([''])
                  ins_src.close()
               else:
                  # print(tmpline,end='')
                  ik_start=0
                  if tmpsplit[0]=='JSR' or tmpsplit[0]=='JNC' or tmpsplit[0]=='JMP' or tmpsplit[0]=='JNI':
                     ik_start=2
                     tmpline_cb=tmpsplit[0]+" "+tmpsplit[1]+" "
                  for ik in range(ik_start,len(tmpsplit)):
                     alias_match=0
                     for ik2 in range(sdef_idx):
                        if tmpsplit[ik]==header_sdef_alias[ik2]:
                           tmpline_cb=tmpline_cb+header_sdef_cbit[ik2]+' '
                           alias_match=1
                           # if tmpsplit[ik]=='YAD1ALL':
                           #    print(tmpline_cb)
                           #    print(dreg_)
                     if alias_match==0:
                        tmpline_cb=tmpline_cb+tmpsplit[ik]+' '
                  # print(tmpsplit,"-",tmpline_cb.split())
                  if tmpsplit[0]=='OUT':  # BLOCK OUT 문 처리 기 선언된 인서트 문 소환
                     tmpline_cb=tmpline[:len(tmpline)-1]

                  # if tmpsplit[0]=='JSR':
                  #    print(tmpline_cb,tmpsplit)
                     # print(tmpline_cb,tmpsplit)
                     # if tmpsplit[1]=='A': bn_cnt=0
                     #    # tmpline='INSERT BLOCK_LIST0'
                     #    # tmpsplit=['INSERT','BLOCK_LIST0']
                     # elif tmpsplit[1]=='B':  bn_cnt=1
                     # elif tmpsplit[1]=='C':  bn_cnt=2
                     # elif tmpsplit[1]=='D':  bn_cnt=3
                     # elif tmpsplit[1]=='E':  bn_cnt=4
                     # elif tmpsplit[1]=='F':  bn_cnt=5
                     # elif tmpsplit[1]=='G':  bn_cnt=6
                     # elif tmpsplit[1]=='H':  bn_cnt=7



                  patline[linecnt]=tmpline_cb
                  linecnt=linecnt+1
                  # print(len(patline))
                  patline.append([''])
                  # if tmpline.find("YAD2ALL")>-1:
                  #    print("^^ : ",tmpline,"-",tmpline_cb)

               

                              

            if patt_register==1:  # 패턴 내 레지스터 기술 처리
               if tmpsplit[0].find("=")>1:
                  tmpline_split=tmpsplit[0].split("=")
                  # print(tmpline,tmpsplit[0],tmpline_split,len(tmpsplit),len(tmpline_split))
                  tmpsplit[0]=tmpline_split[0]
                  if (len(tmpsplit)==2):
                     # print(tmpline,tmpsplit[0],tmpline_split)
                     tmpsplit.append("")
                  elif(len(tmpsplit)==1):
                     tmpsplit.append("")
                     tmpsplit.append("")
                  tmpsplit[2]=tmpline_split[1]
               elif(tmpsplit[1].find("=")==0 and len(tmpsplit[1])>1):
                  # print(tmpline,tmpsplit[0],tmpline_split,len(tmpsplit),len(tmpline_split))
                  if (len(tmpsplit)==2):
                     tmpsplit.append("")
                  # print(tmpsplit)
                  
                  tmpsplit[2]=tmpsplit[1][1:]
               

               if tmpsplit[0]=='D1': tmpsplit[0]='D1A_1'
               if tmpsplit[0]=='D2': tmpsplit[0]='D2A_1' 
               if tmpsplit[0]=='D1_2': tmpsplit[0]='D1A_2'
               if tmpsplit[0]=='D2_2': tmpsplit[0]='D2A_2' 
               if tmpsplit[0]=='D1_3': tmpsplit[0]='D1A_3'
               if tmpsplit[0]=='D2_3': tmpsplit[0]='D2A_3' 
               if tmpsplit[0]=='D1_4': tmpsplit[0]='D1A_4'
               if tmpsplit[0]=='D2_4': tmpsplit[0]='D2A_4' 
               if tmpsplit[0]=='D3B': tmpsplit[0]='D3B_1' 
               if tmpsplit[0]=='D4B': tmpsplit[0]='D4B_1' 
               if tmpsplit[0]=='D5': tmpsplit[0]='D5_1'
               if tmpsplit[0]=='D6': tmpsplit[0]='D6_1' 
               if tmpsplit[0]=='XH': tmpsplit[0]='XH_1'
               if tmpsplit[0]=='YH': tmpsplit[0]='YH_1' 


               if tmpsplit[0]=='TPH': tmpsplit[0]='TPH1A_1' 
               if tmpsplit[0]=='TPH2': tmpsplit[0]='TPH2A_1' 
               if tmpsplit[0]=='TPH_2': tmpsplit[0]='TPH1A_2' 
               if tmpsplit[0]=='TPH1_2': tmpsplit[0]='TPH1A_2' 
               if tmpsplit[0]=='TPH2_2': tmpsplit[0]='TPH2A_2' 
               if tmpsplit[0]=='TPH_3': tmpsplit[0]='TPH1A_3' 
               if tmpsplit[0]=='TPH1_3': tmpsplit[0]='TPH1A_3' 
               if tmpsplit[0]=='TPH2_3': tmpsplit[0]='TPH2A_3' 
               if tmpsplit[0]=='TPH_4': tmpsplit[0]='TPH1A_4' 
               if tmpsplit[0]=='TPH1_4': tmpsplit[0]='TPH1A_4' 
               if tmpsplit[0]=='TPH2_4': tmpsplit[0]='TPH2A_4' 
               # print(tmpline,tmpsplit[0],tmpsplit,len(tmpsplit),len(tmpline_split))

               if tmpsplit[0][0]=='D' and tmpsplit[0][:2]!='DR':  # 'D'로 시작하는 reg 들 처리
                  for idr in range(len(dreg_name)):
                     if dreg_name[idr]==tmpsplit[0]:
                        if dreg_region[idr]==0:  # REGION 파일에서 선 설정된 게 없을 때 
                           if tmpsplit[2][0]=='#':
                              dreg_[idr]=int(tmpsplit[2][1:],16)
                           else:
                              dreg_[idr]=int(tmpsplit[2])
               if tmpsplit[0][:2]=='TP':
                  # if patn_iofmt=='#0000' or patn_iofmt=='#0' or patn_iofmt=='0':
                  #    if tmpsplit[2][0]=='#':
                  #       tpreg_val=int(tmpsplit[2][1:],16)
                  #    elif tmpsplit[1][:2]=='=#':
                  #       tpreg_val=int(tmpsplit[1][2:],16)
                  #    else:
                  #       if tmpsplit[0][:2]!='TI':
                  #          print(tmpsplit)
                  #          tpreg_val=int(tmpsplit[2])
                  # else:
                  # if patn_iofmt[0]=='#':
                  #    tpreg_val=int(patn_iofmt[1:],16)
                  if tmpsplit[2][0]=='#':
                     tpreg_val=int(tmpsplit[2][1:],16)
                  elif tmpsplit[2][:2]=='0x':
                     tpreg_val=int(tmpsplit[2][2:],16)
                  else:
                     if tmpsplit[0][:2]!='TI':
                        # print(tmpsplit,patn_iofmt)
                        if patn_iofmt[0]=='#':
                           tpreg_val=int(patn_iofmt[1:])   
                        else:
                           tpreg_val=int(patn_iofmt)
                        # print(tmpsplit,patn_iofmt,tpreg_val)
                        

                  for itph in range(len(tpreg_name)):
                     if tpreg_name[itph]==tmpsplit[0]:
                        tpreg_[itph]=tpreg_val
                        # print(tmpsplit)                           
                        if tpreg_name[itph]=='TPH1A_1' or tpreg_name[itph]=='TPH2A_1':
                           if (patn_iofmt[0]=='#' and patn_iofmt!='#0000'):tpreg_[itph]=int(patn_iofmt[1:],16)
                           elif (patn_iofmt[:2]=='0x' and patn_iofmt!='0x0000'):tpreg_[itph]=int(patn_iofmt[2:],16)
                              

                        # if patn_iofmt!='#0000' or patn_iofmt!='#0' or patn_iofmt!='0': 
              

            if tmpsplit[0]=='START':
               patt_start=1
               patt_register=0
               # print(dreg_)
            if tmpsplit[0]=='REGISTER':
               patt_register=1
               # for isdef in range(sdef_idx):
               #    print(isdef,header_sdef_alias[isdef],":",header_sdef_desc[isdef])
      # if tmpline.find("YAD2ALL")>-1:
      #    print(tmpline,patline[linecnt-1])

   src.close()

   # for i in range(sdef_idx):
   #    tmpsplit=header_sdef_cbit[i].split()
      # for ij in range(len(tmpsplit)):
      #    if (tmpsplit[ij].find('<')>=-1):
      #       if (tmpsplit[ij][0])=='X':
      #          # print(tmpsplit[ij][:tmpsplit[ij].find('<')])
      # if (header_sdef_alias[i].find("YAD"))>-1: print(i,header_sdef_alias[i],"=",header_sdef_cbit[i].split())

   # for i in range(100):
   #    print(i,header_sdef_alias[i],"=",header_sdef_cbit[i].split())

   # for i in range(linecnt):
   #    if patline[i].find("<B")>-1:
   #       print(patline[i])


   pcnt=0
   lineway=[0]*linecnt
   pccnt=[0]*linecnt
   label=['-']*linecnt
   labelcnt=0

   for i in range(linecnt):         #     loop / jump / call / insert 처리.. ==> 실제 수행되는 line 기술 ( loop는 1회 반영)
      pattmp0=patline[i].split()
      if pattmp0[0]!=':':
         pcnt=pcnt+1
         waycnt=0
         if len(pattmp0[0])>0:
            if pattmp0[0][len(pattmp0[0])-1]==':':
               label[i]=pattmp0[0][:len(pattmp0[0])-1]
      waycnt=waycnt+1
      pccnt[i]=pcnt
      lineway[i]=waycnt
      # print('%5d %5X %10s %2d '%(i,pccnt[i],label[i],lineway[i]),patline[i])
      # if patline[i][:4]=='STPS':
      #    break
      if label[i]!='-':
         label_name[labelcnt]= label[i]
         label_pc[labelcnt]= pccnt[i]
         label_idx[labelcnt]= i
         labelcnt=labelcnt+1
         # print(label_name,len(label_name))


   # for i in range(labelcnt):
      # print(label_name[i],label_idx[i],"%04X"%(label_pc[i]))

   #---------------------------------------------------------------------
   pi=0
   jump_=0
   call_=0
   rtn_=0
   call_addr=[0]*20
   ret_addr=[0]*20
   cr_sp=0

   jump_addr=0

   loop_cnt=[-1]*10
   loop_addr=[0]*10


   # call_addr=0
   # ret_addr=0

   cr_sp=0
   pat_seq_cnt=0
   # print(linecnt)
   for i in range(linecnt*200):
      # print('%5d %5d %5X %10s %2d '%(i,pi,pccnt[pi],label[pi],lineway[pi]),patline[pi])
      # if patline[pi].find("YC_2")>-1: print(patline[pi])
      # patline_seq[pat_seq_cnt]=patline[pi]
      patline_split=patline[pi].split()
      patline_seq[pat_seq_cnt]=''
      for isp in range(len(patline_split)):
         patline_seq[pat_seq_cnt]=patline_seq[pat_seq_cnt]+str(patline_split[isp])+' '

      pccnt_seq[pat_seq_cnt]=pccnt[pi]
      icnt_seq[pat_seq_cnt]=pi
      label_seq[pat_seq_cnt]=label[pi]
      lineway_seq[pat_seq_cnt]=lineway[pi]

      patline_seq.append([''])
      pccnt_seq.append([0])
      icnt_seq.append([0])
      label_seq.append([''])
      lineway_seq.append([0])
      pat_seq_cnt=pat_seq_cnt+1

      if patline[pi].find('STB')>-1:
         print(pi,patline[pi],patline_split[0][2:],int(patline_split[1][1:],16))
         for ib in range(len(breg_)):
            if patline_split[0][2:]==breg_name[ib]:
               breg_[ib]=int(patline_split[1][1:],16)


      if patline[pi].find('STN')>-1:
         # print(patline[pi],patline_split[0][2:],int(patline_split[1][1:],16))
         for ib in range(len(nreg_)):
            if patline_split[0][2:]==nreg_name[ib]:
               nreg_[ib]=int(patline_split[1][1:],16)

      # if patline[pi].find('OUT')>-1:
      #    print(patline[pi])
         # if tmpsplit[1]=='A': bn_cnt=0
         #    # tmpline='INSERT BLOCK_LIST0'
         #    # tmpsplit=['INSERT','BLOCK_LIST0']
         # elif tmpsplit[1]=='B':  bn_cnt=1
         # elif tmpsplit[1]=='C':  bn_cnt=2
         # elif tmpsplit[1]=='D':  bn_cnt=3
         # elif tmpsplit[1]=='E':  bn_cnt=4
         # elif tmpsplit[1]=='F':  bn_cnt=5
         # elif tmpsplit[1]=='G':  bn_cnt=6
         # elif tmpsplit[1]=='H':  bn_cnt=7


      if lineway[pi]==1 and patline[pi].find('JNC')>-1:
         if patline_split[0][0:3]=='JNC':
            j_sp_loc=0
         elif patline_split[1][0:3]=='JNC':
            j_sp_loc=1
         elif patline_split[2][0:3]=='JNC':
            j_sp_loc=2
         else:
            j_sp_loc=3
         cflg_=int(patline_split[j_sp_loc][3:])
         # print(ccflg,patline[pi].split()[0])
         # print(cflg_,ccflg[16-cflg_],ccflg)
         if ccflg[16-cflg_]=='1':
            for ii in range(labelcnt):
               if patline_split[j_sp_loc+1]==label_name[ii]:
                  jump_addr=label_idx[ii]
                  jump_=1
            # print("jnc jump",jump_addr,patline[pi].split()[1])
      elif lineway[pi]==1 and patline[pi][:15].find('JSR')>-1:            
         if patline_split[0][0:3]=='JSR':
            j_sp_loc=0
         elif patline_split[1][0:3]=='JSR':
            j_sp_loc=1
         elif patline_split[2][0:3]=='JSR':
            j_sp_loc=2
         else:
            j_sp_loc=3
         # print("jsr","%d"%(cr_sp),patline[pi].split(),call_addr)
         for ii in range(labelcnt):
            if patline_split[j_sp_loc+1]==label_name[ii]:
               call_addr[cr_sp]=label_idx[ii]
               # print(call_addr,ret_addr)
               ret_addr[cr_sp]=pi+16
               call_=1
         cr_sp=cr_sp+1  
         # print(cr_sp,call_addr,ret_addr,patline[pi])
         # print(label_name)
         # print('%5d %5d %5X %10s %2d '%(i,pi,pccnt[pi],label[pi],lineway[pi]),patline[pi])
      elif lineway[pi]==1 and patline[pi][:15].find('RTN')>-1:
         rtn_=1
      elif lineway[pi]==1 and patline[pi][:15].find('JMP')>-1:  
         if patline_split[0][0:3]=='JMP':
            j_sp_loc=0
         elif patline_split[1][0:3]=='JMP':
            j_sp_loc=1
         elif patline_split[2][0:3]=='JMP':
            j_sp_loc=2
         else:
            j_sp_loc=3
         for ii in range(labelcnt):
            if patline_split[j_sp_loc+1]==label_name[ii]:
               jump_addr=label_idx[ii]
               jump_=1
      elif lineway[pi]==1 and patline[pi][:15].find('JNI')>-1:  
         if patline_split[0][0:3]=='JNI':
            j_sp_loc=0
         elif patline_split[1][0:3]=='JNI':
            j_sp_loc=1
         elif patline_split[2][0:3]=='JNI':
            j_sp_loc=2
         else:
            j_sp_loc=3

         jninum_=int(patline_split[j_sp_loc][3:])
         if loop_cnt[jninum_]<0:   # first  case
            loop_cnt[jninum_]=1

         if loop_cnt[jninum_]==0:  # loop complete case
            loop_cnt[jninum_]=-1
            jump_=0
         else:                      # loop process
            loop_cnt[jninum_]=loop_cnt[jninum_]-1
            jump_=1
            if patline_split[j_sp_loc+1][0]=='.':
               if patline_split[j_sp_loc+1]=='.':
                  jump_addr=pi
               elif patline_split[j_sp_loc+1][1]=='-':
                  jump_addr=pi-int(patline_split[j_sp_loc+1][2:])*16
                  # print(jump_addr,pi,patline_split[j_sp_loc+1][2:])
            else:
               for ii in range(labelcnt):
                  if patline_split[j_sp_loc+1]==label_name[ii]:
                     jump_addr=label_idx[ii]
               # jump_=1

      elif lineway[pi]==1 and patline[pi][:15].find('IDXI')>-1:  
         if patline_split[0][0:4]=='IDXI':
            j_sp_loc=0
         elif patline_split[1][0:4]=='IDXI':
            j_sp_loc=1
         elif patline_split[2][0:4]=='IDXI':
            j_sp_loc=2
         else:
            j_sp_loc=3
         
         if loop_cnt[0]<0:   # first  case
            if patline_split[j_sp_loc+1][0]=='#':
               loop_cnt[0]=int('0x'+patline_split[j_sp_loc+1][1:],16)+1
               if loop_cnt[0]>100:  loop_cnt[0]=100
            else:
               loop_cnt[0]=int(patline_split[j_sp_loc+1])+1
               if loop_cnt[0]>100:  loop_cnt[0]=100

         if loop_cnt[0]==0:  # loop complete case
            loop_cnt[0]=-1
            jump_=0
         elif loop_cnt[0]>0:                      # loop process
            loop_cnt[0]=loop_cnt[0]-1
            jump_=1

         jump_addr=pi     


         # print(patline_split,jump_) 
         # print(patline_split,loop_cnt)


      if lineway[pi]==16 and jump_==1:
         pi=jump_addr
         jump_=0
      elif lineway[pi]==16 and call_==1:
         # print("jsr ",call_addr[cr_sp-1],cr_sp,pi)
         pi=call_addr[cr_sp-1]
         call_=0
      elif lineway[pi]==16 and rtn_==1:
         # print("RTN ",ret_addr,cr_sp,pi)
         pi=ret_addr[cr_sp-1]
         # print(ret_addr,cr_sp,pi)
         cr_sp=cr_sp-1
         rtn_=0
      else:
         pi=pi+1

      if patline_split[0]=='STPS':
         break

   #path = "./T5511/Dsol_191226/*k*.asc"
   #file_list = glob.glob(path)


   # ------------------------------------------------------------------------
   # ------------------------------------------------------------------------
   # ----           pattern extract routine -nn                                          
   # ----                                                                    
   # ------------------------------------------------------------------------
   # ------------------------------------------------------------------------

   # pat_format='FMD02'
   CYP=0

   F_CA=['','','','','','','']
   PinFm_CA=['','','','','','','']
   P_CA=['','','','','','','']
   # print(pat_format)
   if pat_format=='FMD01' or pat_format=='FSD01' or pat_format=='FTD01' or pat_format=='FTS01':
      F_CA[0]=FMD01_CA0
      F_CA[1]=FMD01_CA1
      F_CA[2]=FMD01_CA2
      F_CA[3]=FMD01_CA3
      F_CA[4]=FMD01_CA4
      F_CA[5]=FMD01_CA5
      F_CA[6]=FMD01_CA6
      # print(pat_format)
   elif pat_format=='FMD02' or pat_format=='FSD02' or pat_format=='FTD02' or pat_format=='FTS02':
      F_CA[0]=FMD02_CA0
      F_CA[1]=FMD02_CA1
      F_CA[2]=FMD02_CA2
      F_CA[3]=FMD02_CA3
      F_CA[4]=FMD02_CA4
      F_CA[5]=FMD02_CA5
      F_CA[6]=FMD02_CA6
      # print(pat_format)

   x_val=0
   y_val=0

   
   x_tmp0=''
   x_tmp =''
   y_tmp0=''
   y_tmp =''

   for i in range(pat_seq_cnt):

      # print(tp1_," : ",tp2_)

      PinFm_CA=['','','','','','','']
      P_CA=['','','','','','','']
      pat_seq_sp=patline_seq[i].split()
      # if (patline_seq[i].find("LM2")>-1): print(patline_seq[i],pat_seq_sp)

      # if patline_seq[i].find("<B")>-1:
      #    print(patline_seq[i],pat_seq_sp)
      if patline_seq[i].find("OUT")>-1:
         if pat_seq_sp[1]=='A': bn_cnt=0
         elif pat_seq_sp[1]=='B':  bn_cnt=1
         elif pat_seq_sp[1]=='C':  bn_cnt=2
         elif pat_seq_sp[1]=='D':  bn_cnt=3
         elif pat_seq_sp[1]=='E':  bn_cnt=4
         elif pat_seq_sp[1]=='F':  bn_cnt=5
         elif pat_seq_sp[1]=='G':  bn_cnt=6
         elif pat_seq_sp[1]=='H':  bn_cnt=7
         # print("-",patline_seq[i],pat_seq_sp,bn_cnt)

      if patline_seq[i].find("JZD")>-1:
         if jzd_status==1: jzd_status=0
         elif jzd_status==0: jzd_status=1
         # print(jzd_status,patline_seq[i])

      # print(patline_seq[i])

      # if patline_seq[i].find('YC_4<YC_4+D1_4')>-1: 
      #    print(pat_seq_sp)
      #    print(xyreg_[36],xyreg_[40],xyreg_[44],xyreg_[48])

      # print('%5d %5d %5X %10s %2d '%(i,icnt_seq[i],pccnt_seq[i],label_seq[i],lineway_seq[i]),end=' : ')
      if lineway_seq[i]==1: patt_label=label_seq[i]

      patline_f0[i]=format('%06X %10s %5d %2d '%(int(i/16)+1,patt_label,pccnt_seq[i],lineway_seq[i]-1))
      # print('%100s'%(patline_seq[i]),end=' : ')

      if patline_seq[i].find('CYP')>-1:
         cyp_tmp=patline_seq[i][patline_seq[i].find('CYP'):patline_seq[i].find('CYP')+10].split()[0]
         CYP=int(cyp_tmp[3:])
      else:      
         CYP=1

      # if patline_seq[i].find('M2')>-1:
      if 'M2' in pat_seq_sp:
         for iCA in range(7):
            PinFm_CA[iCA]=F_CA[iCA][CYP-1].split(',')[1]
      else:
         for iCA in range(7):
            # print(pat_seq_sp,CYP,F_CA) 
            if F_CA[iCA][CYP-1].find(',')>-1:
               PinFm_CA[iCA]=F_CA[iCA][CYP-1].split(',')[0]
            else:
               PinFm_CA[iCA]=F_CA[iCA][CYP-1]
         # if CYP==16: print('%3s %3s %3s %3s %3s %3s %3s'%(PinFm_CA[0],PinFm_CA[1],PinFm_CA[2],PinFm_CA[3],PinFm_CA[4],PinFm_CA[5],PinFm_CA[6]),end=" ~ ")


      # print('%3s %3s %3s %3s %3s %3s %3s'%(PinFm_CA[0],PinFm_CA[1],PinFm_CA[2],PinFm_CA[3],PinFm_CA[4],PinFm_CA[5],PinFm_CA[6]),end=" ~ ")



      x_tmp0=x_tmp
      y_tmp0=y_tmp
      # x,y address register
      if patline_seq[i].find('X<')>-1:
         x_tmp=patline_seq[i][patline_seq[i].find('X<'):patline_seq[i].find('X<')+10].split()[0].split('<')[1]
      elif patline_seq[i].find(' XT')>-1:
         x_tmp=patline_seq[i][patline_seq[i].find(' XT')+1:patline_seq[i].find(' XT')+10].split()[0]
      else:
         x_tmp="XC_1"

      if x_tmp=='XT':
         x_tmp='XT1'
      elif x_tmp.find('_')==-1 and x_tmp[1]!='T':
         x_tmp=x_tmp+'_1'

      if patline_seq[i].find('Y<')>-1:
         y_tmp=patline_seq[i][patline_seq[i].find('Y<'):patline_seq[i].find('Y<')+10].split()[0].split('<')[1]
      elif patline_seq[i].find(' YT')>-1:
         y_tmp=patline_seq[i][patline_seq[i].find(' YT')+1:patline_seq[i].find(' YT')+10].split()[0]
      else:
         y_tmp="YC_1"

      if y_tmp=='YT':
         y_tmp='YT1'
      elif y_tmp.find('_')==-1 and y_tmp[1]!='T':
         y_tmp=y_tmp+'_1'


      for ixy in range(len(xyreg_name)):
         if x_tmp==xyreg_name[ixy]: x_val=xyreg_[ixy]
         if y_tmp==xyreg_name[ixy]: y_val=xyreg_[ixy]
            # if y_tmp=='YC_3': print('y_tmp:',ixy,y_tmp,y_val)

      if 'SCROFF' not in pat_seq_sp:
         # print(patline_seq[i])
         # print(x_val,end='_')
         if patn_scr=='2':
            if x_val>0xffff:
               x_val2=x_val//0x10000
               x_val=scr2[x_val%0x10000]
               x_val=x_val2*0x10000+x_val
            elif bn_use>0:
               x_val2=b_val
               x_val=scr2[x_val%0x10000]
               x_val=x_val2*0x10000+x_val
               # print('%05X'%(x_val),end=' ')
            else:
               # print(x_val)
               x_val=scr2[x_val]
            # print(x_val,end=' ')
         elif patn_scr=='N':
            if bn_use>0:
               x_val2=b_val
               x_val=x_val2*0x10000+x_val
               # print('%05X'%(x_val),end=' ')
            else:
               # print(x_val)
               x_val=x_val



      xbin=bin(x_val)
      xbinary=''
      for ibin in range(22-len(xbin)):
         xbinary=xbinary+'0'
      xbinary=xbinary+xbin[2:]

      if bn_use>0:
         y_val=n_val*0x10000+(y_val& 0xffff)

      ybin=bin(y_val)
      ybinary=''
      for ibin in range(22-len(ybin)):
         ybinary=ybinary+'0'
      ybinary=ybinary+ybin[2:]

      if patline_seq[i].find('D<TP_')>-1:
         # print(patline_seq[i][patline_seq[i].find('D<TP_')+5:])
         tp_idx=int(patline_seq[i][patline_seq[i].find('D<TP_')+5])
         if jzd_status==0:
            tp1=tp1_[tp_idx]
            tp2=tp2_[tp_idx]
         elif jzd_status==1:
            tp1=tp1_[tp_idx]^0xfffff
            tp2=tp2_[tp_idx]^0xfffff
      else:
         if jzd_status==0:
            tp1=tp1_[1]
            tp2=tp2_[1]
         elif jzd_status==1:
            tp1=tp1_[1]^0xfffff
            tp2=tp2_[1]^0xfffff

      for iCA in range(7):
         if PinFm_CA[iCA][0]=='C':
            if PinFm_CA[iCA] in pat_seq_sp:
               P_CA[iCA]='1'
            else:
               P_CA[iCA]='0'
            
            
         elif PinFm_CA[iCA][0]=='X':
            xbit=int(PinFm_CA[iCA][1:])
            P_CA[iCA]=xbinary[19-xbit]
         elif PinFm_CA[iCA][:2]=='/X':

            xbit=int(PinFm_CA[iCA][2:])
            if xbinary[19-xbit]=='0':
               P_CA[iCA]='1'   
            elif xbinary[19-xbit]=='1':
               P_CA[iCA]='0'   
            else:
               P_CA[iCA]='-'
            # print(xbinary," : ",xbit,"(",xbinary[19-xbit],")"," :  ",b_val," : ",patline_seq[i],P_CA)
            # print('%2d %5x'%(xbit,x_val))
            # if xbit>15:
               # print('%2d %5x'%(xbit,x_val))
            # P_CA[iCA]=xbinary[19-xbit]
         elif PinFm_CA[iCA][0]=='Y':
            ybit=int(PinFm_CA[iCA][1:])
            P_CA[iCA]=ybinary[19-ybit]
         elif PinFm_CA[iCA][:2]=='/Y':
            ybit=int(PinFm_CA[iCA][2:])
            # print(PinFm_CA[iCA],ybit,ybinary[19-ybit],ybinary)
            if ybinary[19-ybit]=='0':
               P_CA[iCA]='1'   
            elif ybinary[19-ybit]=='1':
               P_CA[iCA]='0'   
            else:
               P_CA[iCA]='-'
            # if CYP==16: print(ybit,P_CA[iCA],xyreg_[36],xyreg_[40],xyreg_[44],xyreg_[48],'-',print(patline_seq[i]),end='')
         elif PinFm_CA[iCA]=='FL':
            P_CA[iCA]='0'
         elif PinFm_CA[iCA]=='FH':
            P_CA[iCA]='1'
         else:
            P_CA[iCA]=PinFm_CA[iCA]
            print(iCA,PinFm_CA[iCA][0])
      

      if 'C9' in pat_seq_sp:
         P_R0_CS='1'
      else:
         P_R0_CS='0'
      if 'C29' in pat_seq_sp:
         P_R1_CS='1'
      else:
         P_R1_CS='0'

      if 'C14' in pat_seq_sp:
         P_CKT='1'
      else:
         P_CKT='0'

      if 'C27' in pat_seq_sp and 'C28' in pat_seq_sp:
         P_WCKT='11_'
      elif 'C27' in pat_seq_sp:
         P_WCKT='10_'
      elif 'C28' in pat_seq_sp:
         P_WCKT='01_'
      else:
         P_WCKT='00_'

      if 'C15' in pat_seq_sp and 'C16' in pat_seq_sp:
         P_RDQS0T='11_'
      elif 'C15' in pat_seq_sp:
         P_RDQS0T='10_'
      elif 'C16' in pat_seq_sp:
         P_RDQS0T='01_'
      else:
         P_RDQS0T='00_'

      # if P_RDQS0T!='00_': print(pat_seq_sp)

      # if 'C17' in pat_seq_sp and 'C18' in pat_seq_sp:
      #    P_RDQS1T='11_'
      # elif 'C17' in pat_seq_sp:
      #    P_RDQS1T='10_'
      # elif 'C18' in pat_seq_sp:
      #    P_RDQS1T='01_'
      # else:
      #    P_RDQS1T='00_'


      if 'C19' in pat_seq_sp and 'C20' in pat_seq_sp:
         P_DMI0='11_'
      elif 'C19' in pat_seq_sp:
         P_DMI0='10_'
      elif 'C20' in pat_seq_sp:
         P_DMI0='01_'
      else:
         P_DMI0='00_'

      if 'C21' in pat_seq_sp and 'C22' in pat_seq_sp:
         P_DMI1='11_'
      elif 'C21' in pat_seq_sp:
         P_DMI1='10_'
      elif 'C22' in pat_seq_sp:
         P_DMI1='01_'
      else:
         P_DMI1='00_'




      # print('%3s %3s %3s %3s %3s %3s %3s %3s %3s %3s %4s %4s %4s'%(P_CKT,P_R0_CS,P_R1_CS,P_CA[0],P_CA[1],P_CA[2],P_CA[3],P_CA[4],P_CA[5],P_CA[6],P_WCKT,P_RDQS0T,P_RDQS1T),end=" ")
      # patline_f0[i]=patline_f0[i]+format('%1s %1s %1s %1s%1s%1s%1s%1s%1s%1s_ %2s %2s %2s '%(P_CKT,P_R0_CS,P_R1_CS,P_CA[0],P_CA[1],P_CA[2],P_CA[3],P_CA[4],P_CA[5],P_CA[6],P_WCKT,P_RDQS0T,P_RDQS1T))
      # patline_f0[i]=patline_f0[i]+format('%1s %1s %1s %1s%1s%1s%1s%1s%1s%1s_ %2s %2s %2s %2s %2s '%(P_CKT,P_R0_CS,P_R1_CS,P_CA[6],P_CA[5],P_CA[4],P_CA[3],P_CA[2],P_CA[1],P_CA[0],P_WCKT,P_RDQS0T,P_RDQS1T,P_DMI0,P_DMI1))
      patline_f0[i]=patline_f0[i]+format('%1s %1s %1s %1s%1s%1s%1s%1s%1s%1s_ %2s %2s %2s %2s '%(P_CKT,P_R0_CS,P_R1_CS,P_CA[0],P_CA[1],P_CA[2],P_CA[3],P_CA[4],P_CA[5],P_CA[6],P_WCKT,P_RDQS0T,P_DMI0,P_DMI1))
      # if P_CA[6]=="": print(patline_f0[i],P_CA,PinFm_CA)
      # patline_f0[i]=patline_f0[i]+format(' (%20s_%20s) '%(xbinary,ybinary))
      # patline_f0[i]=patline_f0[i]+format(' (%7x_%7x) '%(x_val,y_val))

      # tp data register


      # if (patline_seq[i].find("YC_3<")>1): print("-----",patline_seq[i],pat_seq_sp)
      for ixy in range(len(pat_seq_sp)):
         xy_val=0
         if pat_seq_sp[ixy].find("B<")==0:
            # pat_seq_sp[ixy]="B_1<"+pat_seq_sp[ixy][2:]
            pat_seq_sp_="B_1<"+pat_seq_sp[ixy][2:]
            pat_seq_sp[ixy]=pat_seq_sp_
            # print(xy_sp,pat_seq_sp[ixy],pat_seq_sp_)
         if pat_seq_sp[ixy].find("N<")==0:
            # pat_seq_sp[ixy]="B_1<"+pat_seq_sp[ixy][2:]
            pat_seq_sp_="N_1<"+pat_seq_sp[ixy][2:]
            pat_seq_sp[ixy]=pat_seq_sp_
            # print(xy_sp,pat_seq_sp[ixy],pat_seq_sp_)
            

         if pat_seq_sp[ixy].find("<")>1:
            # if (pat_seq_sp[ixy].find("TP_4<")>-1): 
            #    print("  ~~~  ",pat_seq_sp[ixy],end= ' : ')            
            #    print('[%8X %8X %8X %8X] [%8X %8X %8X %8X] '%(tp1_[1],tp1_[2],tp1_[3],tp1_[4],tp2_[1],tp2_[2],tp2_[3],tp2_[4]))
            # if (pat_seq_sp[ixy].find("TP1_1+D5")>-1): print("~~~  ",pat_seq_sp[ixy],end= '')
            # if (pat_seq_sp[ixy].find("_4")>-1): print("~~~  ",pat_seq_sp[ixy])
            # if (pat_seq_sp[ixy].find("YC_3<")>-1): print("~~~  ",pat_seq_sp[ixy])
            xy_sp=pat_seq_sp[ixy].split('<')
            # print(xy_sp,end="  - ")
            # if pat_seq_sp[ixy].find("<B")>-1:
            #    print(xy_sp,pat_seq_sp)
            if xy_sp[0]=='XT':
               xy_sp[0]='XT1'
            elif xy_sp[0]=='YT':
               xy_sp[0]='YT1'
            elif xy_sp[0]=='TP':
               xy_sp[0]='TP1_1'
            elif xy_sp[0][:3]=='TP_':
               xy_sp[0]="TP1_"+xy_sp[0][3]
               # print(xy_sp)
            elif xy_sp[0]=='TP1' or xy_sp[0]=='TP2':
               xy_sp[0]=xy_sp[0]+"_1"
            elif xy_sp[0]=='TPH':
               xy_sp[0]='TPH1A_1'
            elif xy_sp[0]=='TPH1' or xy_sp[0]=='TPH2':
               xy_sp[0]=xy_sp[0]+"A_1"
            elif xy_sp[0]=='D1' or xy_sp[0]=='D2':
               xy_sp[0]=xy_sp[0]+"A_1" 
            elif xy_sp[0]=='D1_2' or xy_sp[0]=='D2_2' or xy_sp[0]=='D1_3' or xy_sp[0]=='D2_3' or xy_sp[0]=='D1_4' or xy_sp[0]=='D2_4':
               xy_sp[0]=xy_sp[0][:2]+"A"+xy_sp[0][2:]
            elif xy_sp[0]=='D5' or xy_sp[0]=='D6':
               xy_sp[0]=xy_sp[0]+"_1" 
            elif xy_sp[0].find('_')==-1 and xy_sp[0][1]!='T':   # non XT% YT%
               xy_sp[0]=xy_sp[0]+"_1"
            elif xy_sp[0]=='TPH_1' or xy_sp[0]=='TPH_2' or xy_sp[0]=='TPH_3' or xy_sp[0]=='TPH_4':
               xy_sp[0]=xy_sp[0][:3]+"1A_"+xy_sp[0][len(xy_sp[0])-1]
            elif xy_sp[0]=='TPH2_1' or xy_sp[0]=='TPH2_2' or xy_sp[0]=='TPH2_3' or xy_sp[0]=='TPH2_4':
               xy_sp[0]=xy_sp[0][:4]+"A_"+xy_sp[0][len(xy_sp[0])-1]


            # A < #00
            if xy_sp[1].find("#")>-1:
               # xy_sp[1]=int('0x'+xy_sp[1][xy_sp[1].find('#')+1:],16)
               xy_val=int('0x'+xy_sp[1][xy_sp[1].find('#')+1:],16)
               # print(xy_sp[0],'%5X'%(xy_val))

            # A < B op C
            elif xy_sp[1].find('+')>-1 or xy_sp[1].find('-')>-1 or xy_sp[1].find('"')>-1 or xy_sp[1].find('*')>-1:
               # print(xy_sp)
               op_1=0
               op_2=0
               # if xy_sp[1].find('"')>-1:print(xy_sp)
               if xy_sp[1].find('+')>-1:
                  xy_sp_tmp=xy_sp[1].split('+')
               elif xy_sp[1].find('-')>-1:
                  xy_sp_tmp=xy_sp[1].split('-')
               elif xy_sp[1].find('"')>-1:
                  xy_sp_tmp=xy_sp[1].split('"')
               elif xy_sp[1].find('*')>-1:
                  xy_sp_tmp=xy_sp[1].split('*')
                  print(xy_sp,"-",xy_sp_tmp)

               # print(xy_sp,"-",xy_sp[1].find('*'))

               if xy_sp_tmp[0].find('_')==-1:
                  xy_sp_tmp[0]=xy_sp_tmp[0]+"_1"
                  
               


               for iixy in range(len(xyreg_name)):
                  if xy_sp_tmp[0]==xyreg_name[iixy]:
                     op_1=xyreg_[iixy]
                     # if xy_sp[1].find('"')>-1:print(xy_sp_tmp[0],xy_sp_tmp[1],"%8X"%(op_1))

               for iit in range(len(tpreg_name)):
                  if xy_sp_tmp[0]==tpreg_name[iit]:
                     op_1=tpreg_[iit]
               if xy_sp_tmp[0] in ['TP','TP2','TP_1','TP_2','TP_3','TP_4','TP1_1','TP1_2','TP1_3','TP1_4','TP2_1','TP2_2','TP2_3','TP2_4']:
                  # if (pat_seq_sp[ixy].find("TP1_1+D5")>-1): print(" : ",xy_sp_tmp,end=" ^ ")
                  if xy_sp_tmp[0]=='TP' or xy_sp_tmp[0]=='TP_1':
                     xy_sp_tmp[0]='TP1_1' 
                  elif xy_sp_tmp[0]=='TP2':
                     xy_sp_tmp[0]='TP2_1' 
                  elif xy_sp_tmp[0]=='TP_2':
                     xy_sp_tmp[0]='TP1_2' 
                  elif xy_sp_tmp[0]=='TP_3':
                     xy_sp_tmp[0]='TP1_3' 
                  elif xy_sp_tmp[0]=='TP_4':
                     xy_sp_tmp[0]='TP1_4' 

                  tp_idx=int(xy_sp_tmp[0][4])
                  if xy_sp_tmp[0][:3]=='TP1':
                     op_1=tp1_[tp_idx]
                  elif xy_sp_tmp[0][:3]=='TP2':
                     op_1=tp2_[tp_idx]
                  else:
                     op_1=tp1_[tp_idx+10]

               if xy_sp_tmp[1]=='1':
                  op_2=int(xy_sp_tmp[1])
               elif xy_sp_tmp[1][0]=='D':
                  # if (xy_sp_tmp[0].find("YC_3")>-1): print("~~~  ",xy_sp_tmp)
                  if xy_sp_tmp[1].find('_')==-1:
                     if xy_sp_tmp[1]=='D1' or xy_sp_tmp[1]=='D2':
                        xy_sp_tmp[1]=xy_sp_tmp[1]+"A_1"
                     else:
                        xy_sp_tmp[1]=xy_sp_tmp[1]+"_1"
                  elif xy_sp_tmp[1].find('D1_')==0 or xy_sp_tmp[1].find('D2_')==0:
                     xy_sp_tmp[1]=xy_sp_tmp[1][:2]+"A_"+xy_sp_tmp[1][3]
                     # print("~~~  ",xy_sp_tmp)
                     # xy_sp_tmp[1]=xy_sp_tmp[1]+"A_1"

                  for idr in range(len(dreg_name)):
                     if xy_sp_tmp[1]==dreg_name[idr]:
                        op_2=dreg_[idr]

               if xy_sp[1].find('+')>-1:
                  xy_val=op_1+op_2
                  # if (pat_seq_sp[ixy].find("TP1_1+D5")>-1): 
                  #    print('%X %X %X'%(xy_val,op_1,op_2),xy_sp_tmp[1],end='>')
                  #    print('[%8X %8X %8X %8X] [%8X %8X %8X %8X] '%(tp1_[1],tp1_[2],tp1_[3],tp1_[4],tp2_[1],tp2_[2],tp2_[3],tp2_[4]))
                  # print(xy_sp,op_1,op_2,xy_val)
               elif xy_sp[1].find('-')>-1:
                  xy_val=op_1-op_2
               elif xy_sp[1].find('"')>-1:
                  # print(xy_val,op_1,op_2,xy_sp_tmp[1])
                  xy_val=op_1^op_2
                  # print('%X %X %X'%(xy_val,op_1,op_2),xy_sp_tmp[1])
               elif xy_sp[1].find('*')>-1:
                  # print(xy_val,op_1,op_2,xy_sp_tmp[1])
                  print(xy_sp,op_1,op_2,xy_val)
                  xy_val=op_1*op_2
               
               # print(xy_sp)
               # print(xy_sp,xy_sp_tmp,"%x"%(xy_val))
              
                  # print(dreg_)
               # print('%X %X %X'%(xy_val,op_1,op_2))
   #        A < B
            elif xy_sp[1][0]=='D':
               # print(xy_sp)
               if xy_sp[1]=='D1' or xy_sp[1]=='D2':
                  xy_sp[1]=xy_sp[1]+'A_1'
                  # print(xy_sp)
               elif xy_sp[1]=='D1_2' or xy_sp[1]=='D2_2':
                  xy_sp[1]=xy_sp[1][:2]+'A_2'
               elif xy_sp[1]=='D1_3' or xy_sp[1]=='D2_3':
                  xy_sp[1]=xy_sp[1][:2]+'A_3'
               elif xy_sp[1]=='D1_4' or xy_sp[1]=='D2_4':
                  xy_sp[1]=xy_sp[1][:2]+'A_4'
               elif xy_sp[1].find('_')==-1:
                  xy_sp[1]=xy_sp[1]+"_1"

               for idr in range(len(dreg_name)):
                  if xy_sp[1]==dreg_name[idr]:
                     xy_val=dreg_[idr]
                     # print(xy_sp," %5X "%(xy_val))
            elif xy_sp[1][0:3]=='TPH':
               if xy_sp[1]=='TP':
                  xy_sp[1]='TP1_1'
               if xy_sp[1]=='TP1' or xy_sp[1]=='TP2':
                  xy_sp[1]=xy_sp[1]+"_1"
               elif xy_sp[1]=='TPH':
                  xy_sp[1]='TPH1A_1'
               elif xy_sp[1]=='TPH1' or xy_sp[1]=='TPH2':
                  xy_sp[1]=xy_sp[1]+"A_1"
               elif xy_sp[1]=='TPH1_2' or xy_sp[1]=='TPH2_2':
                  xy_sp[1]=xy_sp[1][:4]+"A_2"
               elif xy_sp[1]=='TPH1_3' or xy_sp[1]=='TPH2_3':
                  xy_sp[1]=xy_sp[1][:4]+"A_3"
               elif xy_sp[1]=='TPH1_4' or xy_sp[1]=='TPH2_4':
                  xy_sp[1]=xy_sp[1][:4]+"A_4"
               elif xy_sp[1]=='TPH_1' or xy_sp[1]=='TPH_2' or xy_sp[1]=='TPH_3' or xy_sp[1]=='TPH_4':
                  xy_sp[1]=xy_sp[1][:3]+"1A_"+xy_sp[1][len(xy_sp[1])-1]


               # print(xy_sp)
                  # print(patline_seq[i])


               # xy_val=dreg_[0]   
               # if xy_sp[1].find("TPH")>-1:
               for itp in range(len(tpreg_name)):
                  if xy_sp[1]==tpreg_name[itp]:
                     xy_val=tpreg_[itp]

                     # print(xy_sp,xy_val)
               # print(xy_sp,xy_val,tpreg_)

            elif xy_sp[1][0]=='B':
               # print(xy_sp,pat_seq_sp)
               for ib in range(len(breg_name)):
                  if xy_sp[1].split('_')[0]==breg_name[ib]:
                     b_val_[int(xy_sp[0][len(xy_sp[0])-1])]=breg_[bn_cnt][ib]
                     b_val=breg_[bn_cnt][ib]
                     # print(bn_cnt,b_val_,b_val,xy_sp)
            elif xy_sp[1][0]=='N':
               for ib in range(len(nreg_name)):
                  if xy_sp[1].split('_')[0]==nreg_name[ib]:
                     n_val_[int(xy_sp[0][len(xy_sp[0])-1])]=nreg_[bn_cnt][ib]
                     n_val=nreg_[bn_cnt][ib]
            elif xy_sp[1][0]=='Y' or xy_sp[1][0]=='X':
               if len(xy_sp[1])==2: xy_sp[1]=xy_sp[1]+'_1'
               for iixy in range(len(xyreg_name)):
                  if xy_sp[1]==xyreg_name[iixy]:
                     xy_val=xyreg_[iixy]
            else:
               # print(xy_sp)
               xy_val=int(xy_sp[1])

            for iixy in range(len(xyreg_name)):
               if xy_sp[0]==xyreg_name[iixy]:
                  # if xy_sp[0]=="XC_1": print(xy_sp," %5X "%(xy_val))
                  xyreg_[iixy]=xy_val
            for idr in range(len(dreg_name)):
               if xy_sp[0]==dreg_name[idr]:                  
                  dreg_[idr]=xy_val
                  # print(xy_sp)
            for iit in range(len(tpreg_name)):
               if xy_sp[0]==tpreg_name[iit]:
                  tpreg_[iit]=xy_val

            if xy_sp[0] in ['TP1_1','TP1_2','TP1_3','TP1_4','TP2_1','TP2_2','TP2_3','TP2_4']:
               tp_idx=int(xy_sp[0][4])
               # print(xy_sp,tp_idx,xy_val)
               if  pat_seq_sp[ixy].find('TP<TP*2')>-1:
                  # print("%6x"%(tp1_[1]))
                  tp1_[1]=tp1_[1]*2
                  # print("%6x"%(tp1_[1]))
               elif  pat_seq_sp[ixy].find('TP2<TP2*2')>-1:
                  tp2_[1]=tp2_[1]*2
               elif  pat_seq_sp[ixy].find('TP1_2<TP1_2*2')>-1:
                  tp1_[2]=tp1_[2]*2
               elif  pat_seq_sp[ixy].find('TP2_2<TP2_2*2')>-1:
                  tp2_[2]=tp2_[2]*2
               elif  pat_seq_sp[ixy].find('TP1_3<TP1_3*2')>-1:
                  tp1_[3]=tp1_[3]*2
               elif  pat_seq_sp[ixy].find('TP2_3<TP2_3*2')>-1:
                  tp2_[3]=tp2_[3]*2
               elif  pat_seq_sp[ixy].find('TP1_4<TP1_4*2')>-1:
                  tp1_[4]=tp1_[4]*2
               elif  pat_seq_sp[ixy].find('TP2_4<TP2_4*2')>-1:
                  tp2_[4]=tp2_[4]*2

               elif  pat_seq_sp[ixy]=='TP<TP':
                  tp1_[1]=tp1_[1]
               elif  pat_seq_sp[ixy]=='TP2<TP2':
                  tp2_[1]=tp2_[1]
               elif  pat_seq_sp[ixy]=='TP1_2<TP1_2':
                  tp1_[2]=tp1_[2]
               elif  pat_seq_sp[ixy]=='TP2_2<TP2_2':
                  tp2_[2]=tp2_[2]
               elif  pat_seq_sp[ixy]=='TP1_3<TP1_3':
                  tp1_[3]=tp1_[3]
               elif  pat_seq_sp[ixy]=='TP2_3<TP2_3':
                  tp2_[3]=tp2_[3]
               elif  pat_seq_sp[ixy]=='TP1_4<TP1_4':
                  tp1_[4]=tp1_[4]
               elif  pat_seq_sp[ixy]=='TP2_4<TP2_4':
                  tp2_[4]=tp2_[4]

               elif  pat_seq_sp[ixy].find('TP</TP')>-1:
                  tp1_[1]=tp1_[1]^(0xffff)
               elif  pat_seq_sp[ixy].find('TP2</TP2')>-1:
                  tp2_[1]=tp2_[1]^(0xffff)
               elif  pat_seq_sp[ixy].find('TP1_2</TP1_2')>-1:
                  tp1_[2]=tp1_[2]^(0xffff)
               elif  pat_seq_sp[ixy].find('TP2_2</TP2_2')>-1:
                  tp2_[2]=tp2_[2]^(0xffff)
               elif  pat_seq_sp[ixy].find('TP1_3</TP1_3')>-1:
                  tp1_[3]=tp1_[3]^(0xffff)
               elif  pat_seq_sp[ixy].find('TP2_3</TP2_3')>-1:
                  tp2_[3]=tp2_[3]^(0xffff)
               elif  pat_seq_sp[ixy].find('TP1_4</TP1_4')>-1:
                  tp1_[4]=tp1_[4]^(0xffff)
               elif  pat_seq_sp[ixy].find('TP2_4</TP2_4')>-1:
                  tp2_[4]=tp2_[4]^(0xffff)



               elif xy_sp[0][:3]=='TP1':
                  tp1_[tp_idx]=xy_val
               elif xy_sp[0][:3]=='TP2':
                  tp2_[tp_idx]=xy_val
               else:
                  tp1_[tp_idx+10]=xy_val



               # print(xy_sp[0],end=" : ")
               # print('[%8X %8X %8X %8X] [%8X %8X %8X %8X] '%(tp1_[1],tp1_[2],tp1_[3],tp1_[4],tp2_[1],tp2_[2],tp2_[3],tp2_[4]))
               # print(tp1_,tp2_)
            # print(xy_sp,xreg_,yreg_,xy_val)
            # if xy_sp[0]=='YC_3': print(dreg_)

            # if (pat_seq_sp[ixy].find("TP_4<")>-1): 
            #    print("  ~~~  ",pat_seq_sp[ixy],end= ' : ')            
            #    print('[%8X %8X %8X %8X] [%8X %8X %8X %8X] '%(tp1_[1],tp1_[2],tp1_[3],tp1_[4],tp2_[1],tp2_[2],tp2_[3],tp2_[4]))



      for ixy in range(len(xyreg_name)):

         if x_tmp==xyreg_name[ixy]:
            x_addr=xyreg_[ixy]
         if y_tmp==xyreg_name[ixy]:
            y_addr=xyreg_[ixy]





      tp1f=0
      tp2f=0
      if 'W' in pat_seq_sp or 'R' in pat_seq_sp:
         tp1f=tp1
         tp2f=tp2
         if '/D2' in pat_seq_sp:
            tp2f=tp2^65535
         if '/D' in pat_seq_sp:
            tp1f=tp1^65535
         # print(pat_seq_sp)

         # print('%5s %5s %5X %5X %4X %4X'%(x_tmp,y_tmp,x_addr,y_addr,tp1f,tp2f),end='')  #~~
      # else:
         # print('%5s %5s %5X %5X %4X %4X'%(x_tmp,y_tmp,x_addr,y_addr,0,0),end='') #~~

         # print('%5s %5s %5X %5X %4X %4X'%(x_tmp,y_tmp,x_addr,y_addr,0,0),xyreg_,dreg_,end='')

   # print('%5d %5d %5X %10s %2d '%(i,icnt_seq[i],pccnt_seq[i],label_seq[i],lineway_seq[i]),end=' : ')
   #    print('%100s'%(patline_seq[i]),end=' : ')

      # print('%3s %3s %3s %3s %3s %3s %3s %3s %3s %3s %4s %4s %4s'%(P_CKT,P_R0_CS,P_R1_CS,P_CA[0],P_CA[1],P_CA[2],P_CA[3],P_CA[4],P_CA[5],P_CA[6],P_WCKT,P_RDQS0T,P_RDQS1T),end=" ")


      if dinv==1 and 'R' in pat_seq_sp:
         # print(bin(tp1f & 0xffff),bin(tp1f & 0xffff))
         tp1f_tmp=bin(tp1f & 0xffff)
         tp2f_tmp=bin(tp2f & 0xffff)
         dmi0_=''
         dmi1_=''

         if len(tp1f_tmp)<10:
            tp1f_tmp_b1='0'*8
            tp1f_tmp_b0='0'*(10-len(tp1f_tmp))+tp1f_tmp[2:]
         elif len(tp1f_tmp)<20:
            tp1f_tmp_b1='0'*(8-len(tp1f_tmp[2:len(tp1f_tmp)-8]))+tp1f_tmp[2:len(tp1f_tmp)-8]
            tp1f_tmp_b0=tp1f_tmp[len(tp1f_tmp)-8:]

         if len(tp2f_tmp)<10:
            tp2f_tmp_b1='0'*8
            tp2f_tmp_b0='0'*(10-len(tp2f_tmp))+tp2f_tmp[2:]
         elif len(tp2f_tmp)<20:
            tp2f_tmp_b1='0'*(8-len(tp2f_tmp[2:len(tp2f_tmp)-8]))+tp2f_tmp[2:len(tp2f_tmp)-8]
            tp2f_tmp_b0=tp2f_tmp[len(tp2f_tmp)-8:]

         if tp1f_tmp_b0.count('1')>4:
            tp_tmp_=''
            for ii in range(8):
               if tp1f_tmp_b0[ii]=='1':   tp_tmp_=tp_tmp_+'0'
               elif tp1f_tmp_b0[ii]=='0': tp_tmp_=tp_tmp_+'1'
            tp1f_tmp_b0=tp_tmp_
            dmi0_=dmi0_+"1"
         else:
            dmi0_=dmi0_+"0"
         if tp1f_tmp_b1.count('1')>4:
            tp_tmp_=''
            for ii in range(8):
               if tp1f_tmp_b1[ii]=='1':   tp_tmp_=tp_tmp_+'0'
               elif tp1f_tmp_b1[ii]=='0': tp_tmp_=tp_tmp_+'1'
            tp1f_tmp_b1=tp_tmp_
            dmi1_=dmi1_+"1"
         else:
            dmi1_=dmi1_+"0"

         if tp2f_tmp_b0.count('1')>4:
            tp_tmp_=''
            for ii in range(8):
               if tp2f_tmp_b0[ii]=='1':   tp_tmp_=tp_tmp_+'0'
               elif tp2f_tmp_b0[ii]=='0': tp_tmp_=tp_tmp_+'1'
            tp2f_tmp_b0=tp_tmp_
            dmi0_=dmi0_+"1_"
         else:
            dmi0_=dmi0_+"0_"
         if tp2f_tmp_b1.count('1')>4:
            tp_tmp_=''
            for ii in range(8):
               if tp2f_tmp_b1[ii]=='1':   tp_tmp_=tp_tmp_+'0'
               elif tp2f_tmp_b1[ii]=='0': tp_tmp_=tp_tmp_+'1'
            tp2f_tmp_b1=tp_tmp_
            dmi1_=dmi1_+"1_"
         else:
            dmi1_=dmi1_+"0_"

         tp1f_=int(tp1f_tmp_b0,2)+int(tp1f_tmp_b1,2)*0x100
         tp2f_=int(tp2f_tmp_b0,2)+int(tp2f_tmp_b1,2)*0x100


         # print('0x%04X 0x%04X - 0x%04X 0x%04X'%(tp1f_tmp_b0 & 0xffff,tp1f_tmp_b1 & 0xffff,tp2f_tmp_b0 & 0xffff,tp2f_tmp_b1 & 0xffff))
         # print(tp1f_tmp_b1,tp1f_tmp_b0,tp2f_tmp_b1,tp2f_tmp_b0,' 0x%04X 0x%04X'%(tp1f_ & 0xffff,tp2f_ & 0xffff))


				# if tp1f_tmp.count('1')>4:
         patline_f0[i]=patline_f0[i][:len(patline_f0[i])-8]+format('%s %s 0x%04X 0x%04X'%(dmi0_,dmi1_,tp1f_ & 0xffff,tp2f_ & 0xffff))


         if i<20:
            print(patline_f0[i])
            # print(pat_seq_sp)
      else:
         patline_f0[i]=patline_f0[i]+format('0x%04X 0x%04X'%(tp1f & 0xffff,tp2f & 0xffff))
      patline_f0.append([''])
      # print('')

   pf_cnt=i

   hsc_f_name=''
   if compile_opt1=='A': hsc_f_name='E'
   elif compile_opt1=='B': hsc_f_name='O'
	
   hsc_f_name=hsc_f_name+compile_opt2
   if compile_opt2=='': hsc_f_name="NN"

   fwr1 = open(patn_lst[10].strip('"')+hsc_f_name+'_t5511.txt',"w")
   fwr1.write('IDX   LABEL PC UI CLKT  CS0   CS1   CA WCKT  RDQST DMI0  DMI1  DATAe DATAo \n')
   for i in range(pf_cnt):
      # print(patline_f0[i])
      fwr1.write(patline_f0[i])
      fwr1.write('\n')
   fwr1.close

